# Контейнеризация

Мы много говорили о пользе виртуальных машин. Они предоставляют изолированную среду, в которой приложения гарантированно работают, и поэтому упрощают перенос и тиражирование приложений.

Но у ВМ есть и недостаток: они создают рабочую среду полностью, включая операционную систему (ОС) и весь установленный на ней софт. Когда на одном сервере создаются несколько ВМ, каждая запускает свои отдельные экземпляры ОС и прочих приложений. В результате ресурсы сервера — вычислительная мощность процессора, дисковое пространство и т. д. — расходуются неэффективно.

## Новое решение: контейнеризация

Главное и принципиальное отличие **контейнера** от ВМ в том, что он использует ресурсы и ядро хостовой ОС. Несколько контейнеров, размещённых на одном сервере, используют ресурсы сервера совместно, тем самым экономя их. 

![image](https://pictures.s3.yandex.net/resources/1_55_1626255217.png)

Так же, как и ВМ, контейнер изолирован от других контейнеров и хостовой ОС. Он может содержать различные приложения и запускаться на различных платформах.

Хорошей практикой считается принцип «один контейнер — один сервис». Так проще обновлять приложения и создавать резервные копии. Например, если вы написали для веб-сервера NGINX веб-приложение на Python, поместите сервер и приложение в отдельные контейнеры.

## Слоистая архитектура контейнеров

Говоря о контейнерах, часто употребляют термин **слой**. Любое изменение окружения — установка программы, создание директории — создаёт новый слой. Эти слои накладываются друг на друга.

Если на одном сервере оказываются несколько контейнеров с общими слоями (например, библиотеками), то слои не дублируются: они устанавливаются один раз и затем используются совместно.

## Преимущества контейнеров

С контейнерами разработка стала эффективнее и проще. Чем же они хороши?

- **Экономия ресурсов**. Во-первых, контейнеры занимают меньший объём, чем ВМ: они не содержат отдельных копий ОС и дополнительных программ и утилит. Во-вторых, благодаря общим слоям контейнеры оптимизируют использование ресурсов хоста.
- **Независимость**. Контейнер самодостаточен. Всё, что нужно для работы (библиотеки, настройки, среда запуска), находится внутри.
- **Переносимость**. Контейнер независим. Платформа, на которой его запускают, неважна: он везде будет работать одинаково. Можно спокойно переносить контейнер с одной платформы на другую.
- **Скорость** разворачивания контейнеров и работы в них. Это преимущество следует из предыдущих. Сервер не тратит время на эмуляцию гостевой ОС, а высвободившиеся ресурсы можно направить на увеличение производительности приложений и сервисов.
- **Тиражирование и масштабирование**. Собрали контейнер однажды — копируйте его сколько угодно раз. Запускайте одновременно нужное количество копий контейнера. Всё будет работать одинаково.
- **Оркестрация**. Дирижёр одновременно управляет множеством музыкантов, играющих на разных инструментах. Вы можете создавать похожие системы из контейнеров, каждый из которых выполняет узкую задачу. Оркестрация — это управление такими системами, т. е. координация работы множества контейнеров. Подробнее о ней мы поговорим на следующих уроках.

> Контейнеризация - использование ресурсов и ядра ОС для сразу нескольких изолированных сервисов со своими библиотеками, ресурсы сервера используются эффективнее чем при создании отдельной ВМ.
>
> Слой - любое изменение окружения (установка программы, создание директории), они накладываются друг на друга. Если на одном сервере несколько контейнеров с общими слоями, то они не дублируются, а используются совместно.
>
> Контенеры: 
>
> - экономны, поскольку весят меньше, чем ВМ и используют общие слои оптимизируя использование ресурсов хоста
> - независимы, все что нужно для работы внутри контейнера (библиотеки, настройки, среда запуска)
> - переносимость, нет разницы на какой платформе, везде рабоетает одинаково
> - скорость, не нужно эмулировать ОС, свободные ресурсы тратятся на производительность приложений и сервисов
> - тиражирование и масштабирование, если собрать контейнер один раз, его можно сколько угодно тиражировать и запускать одновременно, работать он будет одинаково
> - оркестрация, можно создавать системы из контейнеров, каждый будет выполнять узкую задачу, оркестрация - координация работы множества контейнеров

# Docker

Как и виртуальные машины, контейнеры создаются из образов. На сегодняшний день самая популярная и удобная платформа для создания и запуска образов — [Docker](https://docs.docker.com/get-docker/).

Docker работает так. Предположим, вы с коллегами разработали приложение. Вы упаковываете его со всеми зависимостями — библиотеками, интерпретаторами, файлами и т. д. — в Docker-образ и отправляете в репозиторий (т. е. в хранилище). Чтобы развернуть приложение, нужно скачать из репозитория образ и создать из него контейнер на рабочем сервере.

Хранилища Docker-образов бывают публичные и приватные. Самое известное публичное хранилище — это Docker Hub. Однако если вы работаете с Yandex Cloud, лучше использовать собственное хранилище облака — Yandex Container Registry. О нём и его плюсах мы поговорим на следующем уроке.

## Как создаются образы

Docker-образы создаются с помощью инструкций, таких как запуск команды, добавление файла или директории, создание переменной окружения. Инструкции хранятся в `Dockerfile` — это обычный текстовый файл, который можно редактировать в любом текстовом редакторе (что соответствует принципам Infrastructure as Code).

Вот простой пример `Dockerfile` для образа, в котором есть только ОС Ubuntu и веб-сервер NGINX:

```
FROM ubuntu:latest
RUN apt-get update -y
RUN apt-get install -y nginx
ENTRYPOINT ["nginx", "-g", "daemon off;"]
```

Каждая инструкция создаёт новый слой образа, и эти слои накладываются друг на друга. В конце вы задаёте команду — исполняемый файл, который будет запущен при старте Docker-контейнера.

В примере выше первая строка определяет исходный образ (публичный образ с последней версией Ubuntu), на основе которого мы строим свой.

Вторая и третья строки устанавливают веб-сервер NGINX.

Последняя строка задаёт точку входа — запускает NGINX.

Процесс создания образа — это считывание и выполнение инструкций из `Dockerfile`. Чтобы создать образ из `Dockerfile`, используется команда `build`. Если файл со спецификацией называется стандартно (`Dockerfile`), не указывайте название. Если иначе — напишите название после ключа `-f`. После ключа `-t` указывается имя образа, который будет создан:

`docker image build -f my-dockerfile -t my-image .`

Точка в примере означает, что для сборки используется текущая директория.

## Как создаются контейнеры из образов

Для работы с хранилищем используются традиционные команды `push` и `pull`. Так мы помещаем образ в хранилище:

`docker push my-image`

Чтобы создать контейнер, загрузите из хранилища образ и запустите его:

```
docker pull my-image
docker run my-image
```

При создании контейнера из образа можно использовать [параметры](https://docs.docker.com/engine/reference/commandline/run/) (флаги). Например, чтобы ограничить ресурсы памяти и процессора, загрузить свежую версию образа, передать значения переменных. Смотрите доступные флаги с помощью традиционного ключа `--help`.

> Контейнеры создаются из образов, самая популярная платформа для создания и запуска образов - Docker
>
> Работает он так: есть приложение, его нужно упаковать со всеми зависимостями (библиотеки, интерпертаторами, файлами ...) в Docker образ и отправить в репозиторий (в хранилище). Чтобы развернуть приложение, нужно скачать образ и создать из него контейнер на рабочем сервере.
>
> Хранилища бывают как публичными, так и приватными (Docker Hub, Yandex Conrtainer Registry...)
>
> Docker образы создаются с помощью инструкций (запуск команды, добавление файла или директории, создание переменной окружения), эти инструкции хранятся в Dockerfile (просто текстовый файл, который можно редактировать в любом редакторе).
>
> Процесс создания образа - считываение и выполнение инструкций из Dockerfile, чтобы создать образ нужна команда `build`, название нужно указывать если файл называется нестандактно (не Dockerfile) `-f` <название файла>  `-t`<название образа, который создастся>
>
> ```
> docker image build -f my-dockerfile -t my-image .
> ```
>
> Поместить образ в хранилище: `docker push my-image`
>
> Создать контейнер, загрузить из хранилища и запустить его:
>
> `docker pull my-image
> docker run my-image`

 **Проверьте себя**

**С помощью Docker можно создавать образы ...**

- виртуальных машин

- контейнеров

- виртуальных машин и контейнеров (зависит от спецификации)

**Образы, созданные в Docker, можно хранить ...**

- только в специальном публичном хранилище Docker Hub

- в любом публичном хранилище образов, в том числе в Yandex Container Registry

- в публичном или приватном хранилище образов, в том числе в Docker Hub и в Yandex Container Registry

**Ответ** - (2;3)

# Yandex Container Registry

На прошлом уроке мы говорили о том, что Docker-образы хранятся в хранилищах. Если вы работаете с Yandex.Cloud, лучше всего использовать сервис [Yandex Container Registry](https://cloud.yandex.ru/docs/container-registry/).

## Преимущества Yandex Container Registry

- **Бесплатный внутренний трафик**. Для создания контейнеров придётся скачивать образы, которые могут весить несколько гигабайтов. Если вы берёте образы из Docker Hub или другого внешнего реестра, трафик тарифицируется. А если из Yandex Container Registry — такой трафик считается внутренним и не оплачивается.
- **Приватный реестр**. В Docker Hub это платная возможность. В Yandex Container Registry ваш реестр по умолчанию приватный. Чтобы сделать его публичным, [предоставьте права](https://cloud.yandex.ru/docs/container-registry/qa/#public-registry) системной группе `allUsers`.
- **Политика автоматического удаления.** При [CI/CD](https://ru.wikipedia.org/wiki/CI/CD) после каждого изменения исходного кода создаётся новый образ. В итоге образов становится слишком много, приходится вручную управлять ими и удалять лишние. В Yandex Container Registry можно настроить [автоматическое удаление](https://cloud.yandex.ru/docs/container-registry/concepts/lifecycle-policy). Это упростит управление образами в рамках CI/CD и сэкономит дисковые ресурсы и деньги, ведь стоимость хранения образов зависит от их объёма.
- **Удобство.** С Yandex Container Registry вы будете работать в привычном интерфейсе консоли управления и с командами утилиты `yc`.

## Реестр, репозиторий и теги

**Реестр** в Yandex Container Registry — это хранилище Docker-образов, а **репозиторий** — набор образов с одинаковыми именами (т. е. версий образа).

Чтобы различать образы в репозитории и отбирать их по правилам, добавляйте к имени образа уникальный в рамках репозитория **тег**. Если тег не задан — последней версии образа автоматически присваивается тег `latest`.

При обращении к образу используется префикс `cr.yandex`. Он означает, что образ хранится Yandex Container Registry. 

Так выглядит запись для обращения к образу:

`cr.yandex/<реестр>/<имя образа>:<тег>.`

Пример полного имени: `cr.yandex/my-registry/my-app:latest`.

Регулярные выражения позволяют выбирать образы по правилам. Например, если тестовые образы приложения `my-app` создавались с тегами `testVersion1`, `testVersion2`, `testVersion3` и т. д., то вы отберёте все тестовые образы вот так: `cr.yandex/my-registry/my-app:test.*`

## Автоматическое удаление

Политики автоматического удаления настраиваются для каждого репозитория отдельно. Политика — это правила, по которым Docker-образы будут удаляться. Например, можно удалять все образы с тегами `test.*` и все образы с тегами `prod.*`, созданные более месяца назад. При этом вы можете на всякий случай сохранить несколько образов, подходящих под условия.

Политики удаления описываются в JSON-файле в виде списка опций и их значений. Обычно используются опции:

- `tag_regexp` — тег Docker-образа для фильтрации.
- `untagged` — флаг для применения правила к Docker-образам без тегов.
- `expire_period` — время, кратное 24 часам, через которое Docker-образ попадает под политику удаления.
- `retained_top` — количество Docker-образов, которые не будут удалены, даже если подходят по правилу.

Вот пример файла `rules.json`:

```json
[
    {
     "description": "Delete prod Docker images older than 30 days but retain 20 last ones", //это типо просто комментарий для понимания
     "tag_regexp": "prod", // тег Docker образа для фильтрации
     "expire_period": "30d", // время, кратное 24 часам, через которое образ попадает под политику удаления
     "retained_top": 20 //кол-во образов которые даже попадающие под политику удаления, не удалятся
    },
    {
     "description": "delete all test Docker images except 10 last ones",
     "tag_regexp": "test.*",
     "retained_top": 10
    },
    {
     "description": "delete all untagged Docker images older than 48 hours",
     "untagged": true, //флаг для применения правила в образам без тегов
     "expire_period": "48h"
    }
]
```

Удаление образа — это ответственное действие. Поэтому после настройки правил проверьте, как они будут работать в автоматическом режиме. Вам поможет тестовый запуск политики: `dry-run`.

Для репозитория можно настроить несколько политик, но активной будет только одна. Включайте и отключайте политики в зависимости от своих задач.

## Container Optimized Image

Yandex Cloud позволяет создать из специального образа [Container Optimized Image](https://cloud.yandex.ru/docs/cos/concepts/) виртуальную машину, чтобы запустить на ней Docker-контейнер. При использовании Container Optimized Image не нужно устанавливать на машину Docker и скачивать образ с помощью команды `docker pull`. Мы опробуем эту возможность в следующей практической работе.

> Преимущества Yandex Container Registry:
>
> - бесплатный внутренний трафик, чтобы создать контейнер придется скачать контейнер, если он качается из вне (Docker Hub или другой реестр), он трафик тарифицируется, если из YCR то бесплатно
> - приватный реестр, изначально реестр приватный, это регулируется правами сестемной группы allUsers
> - политика автоматического удаления
> - удобство, работа в привычном `yc`
>
> Реестр - хранилище Docker образов
>
> Репозиторий - набор образов с одинаковыми именами (версии образа)
>
> Чтобы различать и отбирать по правилам, добавляется к имени, уникальный в репозитории, тег. Если он не задан, то автоматом у последней версии `latest`
>
> Удаление образа - это ответсвенно, после настройки правил можно сделать проверку, как они будут работать в автоматическом режиме: `dry-run`
>
> У репозитория может быть несколько политик, но активна только одна

**Проверьте себя**

**Что такое репозиторий Yandex Container Registry?**

- Альтернативная реализация реестра для хранения Docker-образов

- Набор Docker-образов с одинаковыми именами

- Группа Docker-контейнеров

**Что такое политика автоматического удаления?**

- Соглашение об использовании Yandex Container Registry, которое заключает владелец аккаунта

- Набор правил для автоматического отключения виртуальных машин, созданных из Docker-образов

- Набор правил для автоматического удаления Docker-образов из Yandex Container Registry

**Ответ** - (2;3)

# Создание докер-образа и загрузка его в Container Registry

В этой практической работе вы создадите реестр в Yandex Container Registry, подготовите Docker-образ виртуальной машины и поместите его в реестр, а затем создадите машину из этого образа.

1. [Установите Docker](https://docs.docker.com/get-docker/).

   > Для этого нужно:
   >
   > 1. Настройте [репозиторий пакетов Docker](https://docs.docker.com/engine/install/ubuntu/#set-up-the-repository) .
   >
   > 2. Загрузить последний [пакет DEB](https://desktop.docker.com/linux/main/amd64/docker-desktop-4.17.0-amd64.deb?utm_source=docker&utm_medium=webreferral&utm_campaign=docs-driven-download-linux-amd64) .
   >
   > 3. Установить пакет с помощью apt: 
   >
   >    `sudo apt-get update
   >    sudo apt-get install ./docker-desktop-<version>-<arch>.deb`

2. Создайте реестр в Yandex Container Registry: ` yc container registry create --name my-registry`

   Обратите внимание, что в выводе есть уникальный идентификатор (`id`) реестра. Он пригодится вам для следующих команд.

   ```
    id: crpfpd8jhhldiqah91rc
    folder_id: b1gfdbij3ijgopgqv9m9
    name: my-registry
    status: ACTIVE
    created_at: "2021-04-06T00:46:48.150Z"
   ```

3. Аутентифицируйтесь в Yandex Container Registry с помощью [Docker Credential helper](https://cloud.yandex.ru/docs/container-registry/operations/authentication#cred-helper). Это нужно для того, чтобы внешняя платформа Docker могла от вашего имени отправить образ в ваш приватный реестр в Yandex Cloud.

   ` yc container registry configure-docker`

   В состав Yandex Cloud CLI уже входит утилита docker-credential-yc, которая выступает в роли Docker Credential helper для яндекса (хранит уч. данные пользователя и позволяет работать с приватными реестрами без команды `docker login`).

   По умолчанию используется каталог, указанный в профиле CLI, но можно и указать конкретный через `--folder-name` или `--folder-id`.

4. Подготовьте `Dockerfile`. Можно использовать файл [из урока о Docker](https://praktikum.yandex.ru/trainer/ycloud/lesson/ce07b30f-35a3-45d9-836b-c1a152d5804b):

   ```
    FROM ubuntu:latest
    RUN apt-get update -y
    RUN apt-get install -y nginx
    ENTRYPOINT ["nginx", "-g", "daemon off;"]
   ```

   По умолчанию Docker использует файл с именем `Dockerfile` и без расширения.

5. Перейдите в папку с `Dockerfile` и соберите образ (не забудьте подставить идентификатор своего реестра): 

   ```
   docker build . -t cr.yandex/<идентификатор_реестра>/ubuntu-nginx:latest
   ```

   Ключ `-t` позволяет задать образу имя.

   Напоминаем, что в Yandex Container Registry можно загрузить только образы, названные по такому шаблону: ` cr.yandex/<ID реестра>/<имя Docker-образа>:<тег>`

6. Загрузите Docker-образ в реестр:

   ```
    docker push cr.yandex/<идентификатор_реестра>/ubuntu-nginx:latest
   ```

7. В консоли управления перейдите в реестр и предоставьте всем пользователям право использовать хранящиеся образы. Для этого перейдите на вкладку **Права доступа**, в правом верхнем углу нажмите кнопку **Назначить роли**. В открывшемся окне нажмите кнопку **Выбрать пользователя**, на вкладке **Группы** выберите `All users`. Нажмите кнопку **Добавить роль** и последовательно введите `viewer` и `container-registry.images.puller`.  Нажмите кнопку **Сохранить**.

   ![image](https://code.s3.yandex.net/Cloud/CloudEngineer/DevOps/13/01.png)

8. В консоли управления создайте ВМ с помощью Container Optimized Image.

    При создании машины в разделе **Выбор образа загрузочного диска** переключитесь на вкладку **Container Solution** и нажмите **Настроить**. Выберите из реестра созданный образ, остальные настройки оставьте по умолчанию и нажмите **Применить**.

   ![image](https://code.s3.yandex.net/Cloud/CloudEngineer/DevOps/13/02.png)

    Другие настройки ВМ мы уже разбирали.

9. Когда новая ВМ получит статус `Running`, найдите её внешний IP адрес в консоли управления и убедитесь, что по этому адресу отображается приветственная страница NGINX.

**Обратите внимание!** C помощью Docker-образа вы создали и запустили виртуальную машину с предустановленным, нужным вам ПО. При этом вам даже не потребовалось заходить внутрь ВМ и выполнять установку или настройку ПО вручную. 

> Создали машину, а она после создания сразу настроена и вней есть необходимые ПО, в случае примера - это NGINX. То есть:
>
> 1.  Создал реестр
>
> 2. Аунтификация в contrainer registry (чтобы внешняя программа докер могла от моего имени отправить образ в приватный реестр яндекса)
>
> 3. Подготовил Dickerfile в котором прописал что нужна последняя версия ubuntu, обновляем все файлы в системе, устанавливаем вэб-сервер nginx, после чего задается точка входа и запускается nginx 
>
> 4. Собираем образ (через build), то есть создаем образ
>
> 5. Загружаем образ в реестр, то есть загружем его в хранилище (через push)
>
> 6. Создание контейнера 
>
>    Для этого необходимо его сначала загрузить из хранилища (через pull из реестра), после чего запустить (через run). 
>
>    Но в примере этот шаг сделан через API, мы по факту взяли образ который специально создали и создали ВМ с помощью Container Optimized Image

