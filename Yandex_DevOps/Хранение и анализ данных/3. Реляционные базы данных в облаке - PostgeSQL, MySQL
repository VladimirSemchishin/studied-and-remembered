### Создание кластера базы данных MySQL

> Object Storage — удобный и полезный инструмент для хранения данных в облаке. Но для решения практических задач важно не просто хранить данные, но и иметь возможность их изменять и выполнять с ними различные операции (сортировать, группировать, делать выборки и так далее). Для этого используются базы данных. 
>
> На этом уроке вы создадите и настроите кластер управляемой БД MySQL, подключитесь к нему, перенесёте данные в облако, познакомитесь с возможностями резервного копирования и мониторинга. Эти навыки пригодятся вам и в других сервисах управляемых БД, поскольку принципы работы в них очень похожи.

Предположим, вы решили добавить в разрабатываемый вами мессенджер новую функциональность. Вы написали микросервис, который позволяет оценивать сообщения в групповых чатах и хранит оценки в БД MySQL. Давайте поместим эту БД в Yandex Cloud.

Прежде всего понадобится создать кластер: набор виртуальных машин (ВМ, или хостов), на которых будет развёрнута БД. Это обязательный первый шаг при использовании любого сервиса управляемых БД.

Войдите в консоль управления Yandex Cloud и выберите каталог для кластера. Вверху справа нажмите кнопку **Создать ресурс** и выберите из выпадающего списка **Кластер MySQL**.

Откроется **страница с основными настройками кластера:**

1. **Базовые параметры**

   > - **Имя кластера** может включать только цифры, прописные и строчные латинские буквы, дефисы.
   >
   > - Поле **Описание** заполнять необязательно. Оно полезно, если вам нужно создать несколько кластеров для разных целей, чтобы в них было проще ориентироваться.
   >
   > - О том, какое бывает **Окружение** кластера и чем различаются `PRESTABLE` и `PRODUCTION`, мы говорили на одном из предыдущих [уроков](https://praktikum.yandex.ru/trainer/ycloud/lesson/6d9d8f13-7e9a-4afc-9bcd-a97ec171e8d0). Поскольку микросервис только разрабатывается, выберите окружение `PRESTABLE`.
   >
   > - **Версия**. В качестве сервера MySQL в Yandex Cloud используется Percona Server версии 5.7 или 8.0. У этих реализаций сервера улучшенная производительность на многоядерных машинах. Если для вас критична стабильность работы микросервиса, выбирайте проверенную временем 5.7. Для нашей задачи подойдёт 8.0: в ней много новых функций, но она ещё не полностью обкатана.

2. **Класс хостов**

   > Следующий шаг — выбор [класса хостов](https://cloud.yandex.ru/docs/managed-mysql/concepts/instance-types), или шаблона ВМ. Хосты кластера будут развёрнуты на базе ВМ Compute Cloud с использованием этого шаблона.
   >
   > - **Платформа** определяет тип физического процессора (`Intel Broadwell` или `Intel Cascade Lake`), а также конфигурации числа ядер виртуального процессора (vCPU) и размера оперативной памяти.
   >
   > Если тип процессора для вас неважен, выбирайте более современную платформу `Intel Cascade Lake`. Она предоставляет широкий выбор конфигураций вычислительных ресурсов. 
   >
   > Также на конфигурации влияет **тип ВМ**, на которой будет развёрнута БД.
   >
   > - **Standard** — это обычные ВМ с 4 ГБ RAM на ядро vCPU. Это оптимальный баланс между количеством запущенных процессов, быстродействием и потребляемой оперативной памятью.
   >
   > - **Memory-optimized** — машины с вдвое увеличенным объёмом RAM на каждое ядро. Выбирайте их для высоконагруженных сервисов с повышенными требованиями к кешу.
   >
   > - **Burstable** — машины, для которых гарантируется использование лишь доли ядра vCPU (5, 20 или 50%) с вероятностью временного повышения вплоть до 100%. Они стоят дешевле и подходят для задач, где не нужен постоянный уровень производительности, т. е. для тестирования или разработки.
   >
   > Выберем для микросервиса следующий класс хоста: платформа — `Intel Cascade Lake`; тип — `standard`; конфигурация вычислительных ресурсов — `s2.micro` (два ядра vCPU, 8 ГБ RAM).

3. **Хранилище данных**

   Хранилище БД может быть сетевым или локальным. В первом случае данные находятся на виртуальных дисках в инфраструктуре Yandex Cloud. Локальное хранилище — это диски, которые физически размещаются в серверах хостов БД.

   > При создании кластера можно выбирать между следующими типами хранилища:
   >
   > - Стандартное сетевое (**network-hdd**) — это наиболее экономичный вариант. Выбирайте его, если к скорости записи и чтения нет особых требований.
   > - Быстрое сетевое (**network-ssd**) стоит примерно в четыре раза дороже, но при размере хранилища от 100 ГБ работает быстрее стандартного в десять и более раз (чем больше размер, тем заметнее разница в скорости).
   > - Сетевое на нереплицируемых SSD-дисках (**network-ssd-nonreplicated**) — использует сетевые SSD-диски с повышенной производительностью, реализованной за счет устранения избыточности. Объём такого хранилища можно увеличивать только с шагом 93 ГБ.
   > - Быстрое локальное (**local-ssd**) — самое быстрое и дорогое. Если локальный диск откажет, все сохранённые на нём данные будут потеряны. Чтобы этого избежать, при выборе локального хранилища сервис автоматически создаст отказоустойчивый кластер минимум из трёх хостов.

   При создании кластера внимательно выбирайте тип хранилища. Размер хранилища можно будет позже изменить, а тип — нет.

   > Выберите для кластера стандартное сетевое хранилище `network-hdd` размером 50 ГБ.

4. **База данных**

   В этом разделе настроек задаются атрибуты базы: **Имя БД**, уникальное в рамках кластера, **Имя пользователя** (владельца БД) и **Пароль** пользователя.

   > Имя БД : db1 
   >
   > Имя пользователя: user1
   >
   > Пароль: db1user1

5. **Сеть**

   Здесь можно выбрать облачную сеть для кластера и группы безопасности для его сетевого трафика.

   > Оставьте сеть по умолчанию (`default`) или выберите сеть, которую создали на предыдущем курсе. Кластер будет доступен для всех ВМ, которые подключены к вашей облачной сети.

6. **Параметры хостов**

   В этом блоке можно добавить количество хостов, которые будут созданы вместе с кластером, и изменить их параметры. Дополнительные хосты могут понадобиться, например, для репликации БД или снижения нагрузки на хост-мастер.

   > Для наших целей достаточно кластера из одного хоста. Нажмите значок редактирования параметров хоста и в открывшемся окне выберите опцию **Публичный доступ**. Это означает, что к хосту можно будет подключиться из интернета, а не только из облачной сети. Остальные параметры оставьте без изменений.

7. **Дополнительные настройки** 

   Здесь можно:

   - указать время **Начала резервного копирования** и **Окна обслуживания**. 

     > Это пригодится, если вы хотите, чтобы резервное копирование и техобслуживание хостов кластера не совпадали с периодами пиковых нагрузок на БД;

   - разрешить **Доступ из DataLens**, 

     > если вы планируете анализировать в DataLens данные из базы. Подробнее о DataLens вы узнаете на одном из следующих занятий;

   - разрешить **Доступ из консоли управления**, 

     > чтобы выполнять SQL-запросы к БД из консоли управления Yandex Cloud. Отметьте этот пункт: доступ из консоли понадобится нам на следующих практических работах;

   - разрешить **Доступ из Data Transfer**, 

     > чтобы разрешить доступ к кластеру из сервиса [Yandex Data Transfer](https://cloud.yandex.ru/docs/data-transfer/) в Serverless-режиме;

   - разрешить **Сбор статистики**, 

     > чтобы воспользоваться инструментом [Диагностика производительности](https://cloud.yandex.ru/docs/managed-mysql/operations/performance-diagnostics) в кластере;

   - установить **Защиту от удаления**, 

     > чтобы защитить кластер от непреднамеренного удаления пользователем.

> В этом блоке также можно задать настройки БД (например используемую сервером MySQL кодировку при работе с данными и обмене информацией с клиентами). По умолчанию при создании кластера сервис выбирает оптимальные настройки. Изменяйте их, если уверены, что это необходимо.

Настройка завершена. Осталось только нажать кнопку **Создать кластер.**

> Создание кластера займёт несколько минут. Когда он будет готов к работе, его статус на панели Managed Service for MySQL сменится с `Creating` на `Running`, а состояние — на `Alive`.

Статус показывает, что происходит с кластером:

- `Creating` — создаётся;
- `Running` — работает;
- `Error` — не отвечает, возникла проблема;
- `Updating` — обновляется;
- `Stopped` — остановлен;
- `Unknown` — статус неизвестен (так может быть, например, когда кластер не виден из интернета).

Состояние — это показатель доступности кластера:

- `Alive` — все хосты кластера работают;
- `Degraded` — часть хостов (один или больше) не работает;
- `Dead` — все хосты не работают.

### Лимиты, квоты и тарификация

> Не правда ли, создать кластер несложно. Но чтобы делать это легко и быстро — лучше заранее представлять, какой кластер вам нужен и получится ли его создать. На предыдущем уроке вы узнали о возможностях: какие классы хостов или типы хранилищ данных можно выбрать. На этом разберемся с ограничениями.

**Лимиты и квоты**

Ограничения делятся на :

- **Лимиты** — технические ограничения, связанные с особенностями архитектуры Yandex.Cloud. Изменить их невозможно.

  У каждого сервиса управляемых БД собственные лимиты. Как правило, они связаны с тем:

  - какие классы хостов можно использовать;
  - сколько хостов может быть в кластере;
  - какой максимальный размер хранилища данных.

  > Полный перечень лимитов каждого сервиса вы найдете в его документации в разделе **Концепции → Квоты и лимиты** (вот, к примеру, [ограничения Yandex Managed Service for MySQL](https://cloud.yandex.ru/docs/managed-mysql/concepts/limits)).

  В кластере управляемой БД MySQL может быть не больше семи хостов. Размер хранилища данных для одного хоста не превышает 2048 ГБ для стандартного, 4096 ГБ для быстрого сетевого хранилища, 8184 ГБ для хранилища на нереплицируемых SSD-дисках и 1500 ГБ (для платформ `Intel Broadwell` и `Intel Cascade Lake`) или 2944 ГБ (для платформы `Intel Ice Lake`) для локального.

- **Квоты** — организационные ограничения. Их можно увеличить, написав запрос в техническую поддержку.

  Квоты всех сервисов управляемых БД одинаковы. В одном облаке по умолчанию можно создать не более 16 кластеров разных БД. Максимальное число ядер процессора — 96, общий объем виртуальной памяти — 640 ГБ, объём хранилищ данных — 4096 ГБ.

**Тарификация**

> Создавая кластер, вы наверняка обратили внимание на панель расчета стоимости сервиса. В зависимости от параметров кластера цена может быть и очень скромной, и весьма существенной.

*Сравните стоимости кластера из одного хоста `b2.nano` cо стандартным сетевым хранилищем 10 ГБ (824 руб/мес) и кластера из трех хостов `s2.6xlarge` c быстрым локальным хранилищем 1000 ГБ* (544 421 руб/мес)

Стоимость использования сервиса управляемых БД зависит от:

- класса и количества хостов в кластере, 
- типа и размера хранилища данных, 
- объёма резервных копий  
- исходящего трафика.

Чем больше ядер процессора и оперативной памяти задействовано в кластере — тем он дороже. 

Выбирайте класс хоста разумно. Для учебных задач хватит минимального кластера с одним хостом типа **burstable**. Если понадобится, класс хоста можно изменить.

> Оценивается каждый час работы хоста. Если кластер остановлен, оплата идет только за выделенный объём хранилища данных. Это выгодно, если вы используете кластер не постоянно, а время от времени: для учебных практических работ или тестирования. Также не забывайте удалять ненужные кластеры.

***Важно*!** Если вы используете быстрое локальное хранилище данных (`local-ssd`), то при остановке кластера его вычислительные ресурсы не высвобождаются, и за него взимается полная оплата.

Стоимости стандартного сетевого, быстрого сетевого, быстрого локального и хранилища на нереплицируемых SSD-дисках различаются: 

- стандартное сетевое — самое дешёвое, 
- быстрое сетевое и быстрое локальное — самые дорогие. 

Также учитывайте, что для использования быстрого локального хранилища нужно создать кластер как минимум из трех хостов.

Хранение резервных копий оплачивается только в том случае, если размер БД и всех резервных копий больше выбранного размера хранилища.

При использовании сервиса оплачивается только исходящий трафик из Yandex Cloud в интернет сверх 10 ГБ в месяц. Передача трафика между сервисами Yandex Cloud и входящий трафик не тарифицируются.

Тарифы на использование каждого сервиса управляемых БД вы найдете в документации к нему в разделе **Правила тарификации → Действующие правила** (вот, к примеру, [тарифы Managed Service for MySQL](https://cloud.yandex.ru/docs/managed-mysql/pricing)).

Чтобы посмотреть детализацию расходов, в консоли управления Yandex.Cloud откройте раздел **Биллинг**.

> Для примера давайте посчитаем, во сколько обойдётся непрерывная работа кластера, который вы создали на предыдущем уроке (один хост класса `s2.micro` со стандартным сетевым хранилищем 50 ГБ). Кластер используется для учебы — значит, исходящий трафик в интернет незначительный, а в хранилище данных хватит места для бесплатных резервных копий.
>
> Стоимость (в месяц) = стоимость работы хоста × число хостов + стоимость 1 ГБ хранилища × размер хранилища + стоимость хранения резервных копий сверх размера хранилища + стоимость исходящего трафика сверх 10 ГБ.
>
> Стоимость (в месяц)=(4,9×24×30)×1+2,2881×50+0+0=3642,41(4,9×24×30)×1+2,2881×50+0+0=3642,41₽
>
> Допустим, вы учились работать с кластером 20 часов и запускали его только во время занятий. Тогда вы потратите:
>
> Стоимость (в месяц)=(4,9×20)×1+2,2881×50+0+0=212,41(4,9×20)×1+2,2881×50+0+0=212,41 ₽

###  Подключение к БД и добавление данных

**Доступ из консоли управления**

Продолжим практическую работу. В кластере, который вы создали, уже есть БД. Она пока пустая. Поскольку при создании кластера вы выбрали в настройках пункт **Доступ из консоли управления**, в консоли управления Yandex Cloud появилась вкладка с интерфейсом для выполнения SQL-запросов к БД.

Давайте зайдём туда и создадим в БД таблицу для нашего микросервиса.

На странице **Managed Service for MySQL** выберите строку с созданным вами кластером. В панели консоли управления перейдите на вкладку **SQL**. Вам будет предложено выбрать БД для SQL-запросов и имя пользователя, а также ввести пароль. Все эти атрибуты вы задавали при создании кластера.

Нажмите кнопку **Подключиться**. Откроется структура БД (сейчас там написано, что данных нет) и окно ввода для SQL-запросов.

Теперь создадим таблицу. Введите в окне ввода следующий запрос и нажмите кнопку **Выполнить.**

`CREATE TABLE IF NOT EXISTS ratings (`

 	`    rating_id INT AUTO_INCREMENT PRIMARY KEY,`    
 	
 	`    user_id INT NOT NULL,`    
 	
 	`    message_id INT NOT NULL,`    
 	
 	`    rating INT NOT NULL `    

 `) ENGINE=INNODB; `

Обратите внимание, что в качестве движка в сервисе управляемых БД MySQL используется только InnoDB. 

В таблицу можно добавить данные с помощью команды INSERT.

`INSERT INTO ratings (user_id,message_id,rating) VALUES (44,368,4);`

Чтобы отобразить обновлённую структуру БД, нажмите на имя БД и выберите таблицу `ratings`. 

Наведите указатель на заголовок столбца, чтобы увидеть тип данных в нём.

> SQL-запросы через консоль управления Yandex Cloud — нетипичный способ работы с БД. Используйте его для небольших, разовых задач, когда быстрее и проще открыть подключение в браузере. Этот способ не очень удобен: текст запроса и результат его выполнения доступны, только пока вы не закрыли или не перезагрузили страницу в браузере. Конечно, если запрос успешно запущен, то сервис обработает его независимо от состояния консоли управления.

В консоли выводятся только первые 1000 строк результата запроса, даже если данных больше. Чтобы увидеть строку, введите её номер в поле **Номер первой строки**.

## Подключение к кластеру

В основном вы будете работать с БД из приложений или из командной строки. Однако для этого нужно подключиться к хосту, на котором развёрнута БД.

Есть два варианта подключения. Если публичный доступ к хосту открыт, подключитесь к нему через интернет с помощью защищённого SSL-соединения. Если публичного доступа нет, подключитесь к хосту с виртуальной машины, созданной в той же виртуальной сети. SSL-соединение можно не использовать, но тогда трафик между виртуальной машиной и БД шифроваться не будет.

Давайте подключимся к БД через интернет и создадим в ней ещё одну таблицу. 

> Для выполнения этого задания также можно использовать виртуальную машину с Ubuntu

1. Для создания таблицы сделаем в текстовом редакторе файл `createTables.sql` с командами. Например, такой:

`CREATE TABLE IF NOT EXISTS users (    `

​	`user_id INT AUTO_INCREMENT,    `

​	`nickname VARCHAR(128) NOT NULL,    `

 	`avatar VARCHAR(255),    `
 	
 	`mail VARCHAR(255),        `
 	
 	`PRIMARY KEY (user_id) `

 `) ENGINE=INNODB; `

2. Чтобы подключиться к БД через консоль (своего пк или ВМ), сперва нужно установить ssl-сертификат, установить утилиту для работы с sql (mysql-client) и после этого можно подключться. Для этого есть инстукция (Кнопка подключиться в кластере БД), там такие же шаги как и указанные ниже, только еще для других языков программирования.

2. Чтобы выполнить этот запрос в БД, подключимся к хосту. Для этого понадобится SSL-сертификат. Команды для его получения в Ubuntu:

> mkdir ~/.mysql
>
> wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" -O ~/.mysql/root.crt
>
> chmod 0600 ~/.mysql/root.crt



3. Чтобы получить команды для подключения к БД, 

   в консоли управления перейдите на страницу кластера, на вкладке **Обзор** нажмите кнопку **Подключиться**. В результате их выполнения в директории `/home/<домашняя_директория>/.mysql/` сохранится SSL-сертификат `root.crt`.

   Установите утилиту `mysql-client`, если на вашем компьютере или виртуальной машине её нет.

> sudo apt update  
>
> sudo apt install -y mysql-client 

4. Чтобы подключиться к БД, введите команду `mysql`. Для запуска нашего скрипта она выглядит следующим образом:

`mysql --host=<адрес хоста> \
        --port=3306 \
        --ssl-ca=~/.mysql/root.crt \
        --ssl-mode=VERIFY_IDENTITY \
        --user=<имя пользователя> \
        --password \
    <имя_базы_данных> < createTables.sql`

В указанной выше инструкции этот скрипт заполняется сам:

`mysql --host=rc1b-0ic35j5t726heq7e.mdb.yandexcloud.net \
      --port=3306 \
      --ssl-ca=~/.mysql/root.crt \
      --ssl-mode=VERIFY_IDENTITY \
      --user=user1 \
      --password \
      db1`

> Сервис помогает заполнить параметры в команде. Чтобы посмотреть пример команды с адресом хоста, именами пользователя и БД, в консоли управления перейдите на страницу кластера, на вкладке **Обзор** нажмите кнопку **Подключиться**.

После запуска команды введите пароль к БД, после чего в ней будет создана таблица `users`.

> Если при создании кластера вы **не включили** публичный доступ, то к БД можно подключиться с виртуальной машины из той же облачной сети без использования шифрования. Следовательно, в этом случае в команде для подключения опускается параметр `--ssl-ca`, а `--ssl-mode` передаётся со значением DISABLED:
>
> `mysql --host=адрес_хоста \
>       --port=3306 \
>       --ssl-mode=DISABLED \
>       --user=<имя пользователя> \
>       --password \
>       <имя_базы_данных> < createTables.sql`

Естественно, подключаться к БД можно не только из командной оболочки, но и из приложений. Нажмите уже знакомую вам кнопку **Подключиться** и посмотрите примеры кода для Python, PHP, Java, Node.js, Go, Ruby или настроек для драйвера ODBC.

Если вы хотите перенести БД в облако, то понадобится создать **дамп** и восстановить его в нужном кластере. 

> Дамп — это копия БД или её части, представляющая собой текстовый файл с командами SQL (например, CREATE TABLE или INSERT). Его создают с помощью утилиты [mysqldump](https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html).

Давайте попробуем перенести данные в кластер с помощью дампа. Для этого 

1. воспользуемся [тестовой БД](https://github.com/datacharmer/test_db) с данными о сотрудниках компании (имя, дата рождения, дата найма, место работы, зарплата и т. д.). Размер БД — около 167 Мб.

   > Скачайте из репозитория и сохраните на компьютере файлы с расширениями `.sql` и `.dump`. В файле `employees.sql` содержатся SQL команды, необходимые для создания таблиц и добавления в них данных из dump-файлов. Для переноса тестовой БД в облако понадобится запустить этот файл. Но, прежде чем приступить к переносу БД, откройте этот файл и удалите или закомментируйте (допишите в начало строки --) в нём строку 110. В этой строке расположена команда `FLUSH LOGS`, которая закрывает и снова открывает файлы журналов, а они в этой тестовой БД отсутствуют.

2. Создайте базу данных `employees` через консоль управления. 

   > Для этого на странице кластера перейдите на вкладку **Базы данных** и нажмите кнопку **Добавить**.

3. Добавьте пользователю, например `user1`, разрешение на доступ к БД `employees`. 

   > Для этого на странице кластера перейдите на вкладку **Пользователи**, напротив пользователя `user1` нажмите кнопку ··· и выберите **Настроить**. Во всплывающем окне нажмите **Добавить базу данных**, выберите `employees`, добавьте роль `ALL_PRIVILEGES` и нажмите **Сохранить**.

4. Затем в командной строке перейдите в папку сохраненными файлами `.sql` и `.dump` и восстановите данные из дампа с помощью команды:

`mysql --host=rc1b-0ic35j5t726heq7e.mdb.yandexcloud.net \
        --port=3306 \
        --ssl-ca=~/.mysql/root.crt \
        --ssl-mode=VERIFY_IDENTITY \
        --user=user1 \
        --password \
    employees < ~/employees.sql`

> После того как данные скопируются, ваш кластер и БД будут готовы к работе. Подключитесь к БД в консоли управления и убедитесь, что данные перенесены.

### Распределение ответственности между Yandex Cloud и пользователем

|                              | На своем оборудовании | БД в облачной виртуальной машине | Управляемая БД |
| :--------------------------: | :-------------------: | :------------------------------: | -------------- |
|      Развитие продукта       |           +           |                +                 | +              |
|     Закупка оборудования     |           +           |                -                 | -              |
|      Установка сервера       |           +           |                -                 | -              |
|      Конфигурация сети       |           +           |                -                 | -              |
|      Установка ОС и ПО       |           +           |                +                 | -              |
|         Безопасность         |           +           |                -                 | -              |
|            Аудит             |           +           |                -                 | -              |
| Настройка групп безопасности |           +           |                +                 | -              |
|   Тестирование и проверка    |           +           |                +                 | -              |
|         Доступность          |           +           |                +                 | -              |
|    Резервное копирование     |           +           |                +                 | -              |
|          Мониторинг          |           +           |                +                 | -              |
|          Обновления          |           +           |                +                 | -              |
|      Настройка кластера      |           -           |                -                 | +              |

Помимо создания кластера, сервис управляемой БД выполняет важные функции, в том числе связанные с отказоустойчивостью и доступностью БД. Вот за что отвечает сервис:

- своевременное обновление ПО;
- мониторинг работы хостов и БД;
- автоматическое создание резервных копий БД;
- репликация данных между хостами;
- автоматическое переключение нагрузки на резервную реплику при сбое на мастере.

> То есть сервис минимизирует время, необходимое для настройки и поддержки системы, и позволяет вам работать над своим продуктом, не отвлекаясь на рутинные задачи по поддержке инфраструктуры.

В качестве примера рассмотрим, как сервис управляемой БД MySQL обновляет ПО.

> Сервис поддерживает версии MySQL 5.7 и 8. При выходе новых минорных версий обновление происходит автоматически. Владельцы кластеров получают оповещение о сроках работ и доступности БД в этот период.
>
> > Мажорное обновление. В подобном виде апгрейда происходит **комплексное изменение программы, вплоть до ее полной неузнаваемости**.
> >
> > Минорное обновление — это **часть планового внесения изменений**. **Патч**. Под таким видом понимаются небольшие изменения, которые устраняют мелкие ошибки или одну-две уязвимости. В общем, в патче решают экстренную проблему конкретного продукта
>
> Когда версия СУБД становится неподдерживаемой, спустя месяц сервис направляет владельцам кластеров оповещение по электронной почте. Кластеры автоматически обновляются до следующей поддерживаемой версии через семь дней после оповещения для минорных версий и через один месяц для мажорных. Вам не нужно отслеживать выход обновлений и устанавливать их.

Ещё одна важная часть ответственности сервиса — **обеспечение безопасности данных.** 

На самом деле ответственность здесь общая, а точнее — разделяемая (shared responsibility), но на долю облака её приходится гораздо больше.

![image](https://pictures.s3.yandex.net/resources/1_35_1626201218.png)

И наконец, облако предоставляет [техническую поддержку](https://console.cloud.yandex.ru/support), куда вы можете обратиться, если появятся вопросы или проблемы.

**Ответственность пользователя**

Вы, пользователь сервиса, отвечаете за корректность работы приложения и связанной с ним БД: правильность схемы данных, оптимизацию запросов к базе и т. д.

<u>Если нужно перенести данные в облако</u> (например, когда вы переходите на использование сервисов управляемых БД) — то вам понадобится сделать это самостоятельно.

Сервис предоставляет инструменты для мониторинга работы хостов и БД, но отслеживать и оценивать показатели — ваша обязанность. Если БД разрастётся или к ней будет гораздо больше запросов, чем планировалось, — вам самим нужно будет увеличить размер хранилища или число и класс хостов.

Если говорить о безопасности данных, вы несёте часть ответственности и за неё. Любые меры облачного провайдера могут оказаться бесполезны, если вы неправильно настроите доступ к кластерам и БД или установите пароли вроде 12345678, password и т. п.

> Таким образом, сервисы управляемых БД значительно облегчают жизнь и экономят время. Но при этом помните, каким вещам следует уделять внимание, чтобы не возникало проблем.



### Логи и мониторинг кластера

 **Мониторинг**

> Вам наверняка знакомо неприятное ощущение, когда стабильно и быстро работающая система начинает тормозить, подвисать или, того хуже, падать. Чтобы с вашим кластером и БД не случалось таких проблем, заботьтесь об их здоровье и отслеживайте метрики их работы.

Сервисы управляемых БД предоставляют вам инструменты для мониторинга работы хостов и БД, а также анализа логов. Это позволяет вовремя распознавать и исправлять проблемы. Например, вы легко увидите, что кластеру не хватает вычислительных ресурсов или что запросы к БД выполняются слишком медленно.

Рассмотрим эти инструменты на примере управляемой БД MySQL. Войдите в консоль управления, перейдите на страницу кластера и выберите вкладку **Мониторинг**.

**Мониторинг кластера**

Вы увидите информационную панель (дашборд) с графиками.


![image](https://code.s3.yandex.net/Cloud/CloudEngineer/DB/17/01.png)

**Queries per second** — общее количество запросов в секунду, для каждого хоста.

**Average query time** — среднее время исполнения запросов, для каждого хоста (в миллисекундах).

**Slow queries per second** — количество SQL-запросов в секунду, выполняющихся дольше, чем указано в [параметре](https://cloud.yandex.ru/docs/managed-mysql/concepts/settings-list#setting-long-query-time) `long_query_time`, для каждого хоста.

**Connections** — количество подключений, для каждого хоста.

**Threads running** — количество запущенных потоков, для каждого хоста. При увеличении нагрузки на кластер это значение будет быстро расти.

**Disk usage** — занятое дисковое пространство (в байтах), для каждого хоста и для кластера в целом.

**Is Primary** — показывает, какой хост является мастером и как долго.

**Is Alive** — показывает доступность кластера в виде суммы состояний его хостов. Каждый хост в состоянии `Alive` увеличивает общую доступность на 1. При выходе из строя одного из хостов общая доступность уменьшается на 1. Для повышения доступности кластера вы можете добавить в него хосты.

**Replication lag** — отставание реплики от мастера (в секундах).

## Мониторинг состояния хостов

В разделе **Хосты** консоли управления на вкладке **Мониторинг** можно отслеживать состояние хостов:

![image](https://code.s3.yandex.net/Cloud/CloudEngineer/DB/17/02.png)

**CPU usage** — загрузка процессорных ядер. При повышении нагрузки значение `Idle` уменьшается.

**Memory usage** — использование оперативной памяти (RAM) в байтах. При высоких нагрузках значение параметра `Free` уменьшается, а `Used` и других — растёт.

**Disk read/write bytes** — средний объём данных, записанных в хранилище и прочитанных из него (в байтах).

**Disk IOPS** — среднее количество операций ввода-вывода в хранилище.

**Network bytes** — средний объём данных, отправленных в сеть и полученных из неё (в байтах).

**Network packets** — среднее количество пакетов, отправленных в сеть и полученных из неё.

Анализируйте графики на дашборде, чтобы оперативно определять просадку производительности хостов и следить за состоянием всего кластера.

> За мониторинг ресурсов в Yandex Cloud отвечает сервис Yandex Monitoring. Вы подробно познакомитесь и научитесь работать с ним на курсе «DevOps и автоматизация».

В блоке **MySQL overview** отображаются расширенные сведения о состоянии БД на хосте. 

> Подробнее о мониторинге состояния кластера и хостов рассказывается в [документации](https://cloud.yandex.ru/docs/managed-mysql/operations/monitoring).

**Логирование**

Если в работе с БД появляются ошибки или производительность системы падает, изучите логи ошибок или медленных запросов. Сервис фиксирует такие события по умолчанию. Чтобы просмотреть записи, зайдите на вкладку **Логи** и выберите тип логирования и хост (или хосты), работу которого вы хотите проанализировать.

![image](https://code.s3.yandex.net/Cloud/CloudEngineer/DB/17/03.png)

Типы логирования:

- MYSQL_GENERAL — общий журнал запросов к БД;
- MYSQL_ERROR — журнал ошибок MySQL;
- MYSQL_SLOW_QUERY — журнал медленных запросов MySQL.
- MYSQL_AUDIT — информация о подключениях к БД.

### Резервное копирование и восстановление данных

**Резервное копирование**

> Чтобы не потерять данные, применяют резервное копирование. Благодаря ему вы восстановите БД, если данные повреждены. Сервисы управляемых БД выполняют резервное копирование автоматически, а также позволяют сделать его вручную.

В сервисе управляемой БД MySQL резервное копирование происходит раз в сутки. Все журналы транзакций кластера БД сохраняются. Это позволяет восстановить состояние кластера на любой момент в пределах периода хранения резервных копий, кроме последних 30 секунд. По умолчанию резервные копии хранятся семь дней.

Время начала резервного копирования задаётся при создании или изменении кластера в блоке **Дополнительные настройки**. Резервное копирование начнётся в течение получаса после указанного времени. По умолчанию начало резервного копирования устанавливается на 22:00 UTC. Во время окна резервного копирования кластеры остаются полностью доступными.

Чтобы изменить время резервного копирования и окно обслуживания, в разделе **Обзор** нажмите **Изменить кластер**.

![image](https://code.s3.yandex.net/Cloud/CloudEngineer/DB/18/01.png)

Резервную копию можно сделать и вручную, например, если вы подозреваете, что ваш эксперимент с БД может плохо для неё закончиться. В консоли управления на странице кластера выберите вкладку **Резервные копии** и нажмите кнопку **Создать резервную копию**.

**Восстановление из резервной копии**

Если вы случайно удалили таблицу с данными, резервное копирование позволит откатить эти изменения. Восстановите кластер из резервной копии:

1. В консоли управления на странице каталога выберите сервис **Managed Service for MySQL**.
2. Выберите кластер и перейдите на вкладку **Резервные копии**.
3. Напротив резервной копии нажмите `…` и выберите **Восстановить кластер**.
4. Задайте настройки нового кластера. Выберите каталог для него в списке **Каталог**.
5. Нажмите кнопку **Восстановить кластер**.

Сервис запустит операцию восстановления и создаст новый кластер с данными из резервной копии. Если для нового кластера в каталоге не хватает [ресурсов](https://cloud.yandex.ru/docs/managed-mysql/concepts/limits), то восстановить резервную копию не получится.

### Создание кластера базы данных PostgreSQL

**Создание кластера**

> Создание кластера управляемой базы данных PostgreSQL аналогично созданию кластера базы данных MySQL.

Перейдите в сервис управляемых баз данных PostgreSQL и нажмите кнопку **Создать кластер**.

В появившемся окне настроек задайте необходимые параметры.

1. Имя кластера и его описание. 

   > Выберите уникальное в облаке имя кластера. Описание опционально, поэтому можно оставить это поле пустым.

2. В поле **Окружение** выберите `PRODUCTION`.

3. Выберите версию PostgreSQL и класс хоста.

4. Выберите размер и тип сетевого хранилища.

5. Задайте атрибуты базы данных.

6. Выберите из списка сеть, в которой будут находиться хосты кластера (для подключения потребуются публичные хосты).

7. В блоке **Хосты** добавьте ещё два хоста в других зонах доступности для обеспечения отказоустойчивости кластера. База автоматически реплицируется.

8. В блоке **Дополнительные настройки** задайте время начала резервного копирования и включите доступ из консоли управления.

9. Нажмите кнопку **Создать кластер**.

**Подключение**

Как и в случае с MySQL, к хостам кластера Managed Service for PostgreSQL можно подключиться двумя способами.

**Через интернет**

Если вы настроили публичный доступ для нужного хоста, то подключиться к нему можно с помощью SSL-соединения.

**С виртуальных машин Yandex Cloud**

Они должны быть расположены в той же облачной сети. Если к хосту нет публичного доступа, для подключения с таких виртуальных машин SSL-соединение использовать необязательно. Обратите внимание, что если публичный доступ в вашем кластере настроен только для некоторых хостов, автоматическая смена мастера может привести к тому, что вы не сможете подключиться к мастеру из интернета.

Установите клиент для подключения к БД PostgreSQL.  Для этого также можно воспользоваться алгоритмом (который похож на MySQL) в подключении к кластеру.

> Аналогично нужна утилита для PostgreSQL (postgresql-clien, нужно скачать сертификат ssl для подключения, и ввести команду где указывается:
>
> -  хост
> - порт
> - ssl
> - имя бд
> - имя юзера
> - цель сессии = читать и писать

**Загрузка данных в базу данных из CSV**

Одним из способов добавления данных в базу является их загрузка из csv-файла.

Предположим, вы используете БД для организации работы транспортной службы интернет-магазина. Вам нужно добавить в базу таблицу, содержащую данные о расстояниях между складом и пунктами самовывоза, а также о стандартном времени доставки товаров со склада в эти пункты. Создадим csv-файл, например `DTM.csv`, который содержит такие данные (100 - код склада, 101-109 - коды пунктов, Time - стандартное время доставки в минутах, Distance - расстояние в километрах):

> `"depot","store","time","distance"`
>
>  ` "100","101",31,12 ` 
>
>  `"100","102",38,17 `
>
>  `"100","103",56,33 `
>
>  `"100","104",70,60 `
>
>  `"100","105",41,25 `
>
>  `"100","106",21,8 `
>
>  `"100","107",33,14 `
>
>  `"100","108",62,42 `
>
>  `"100","109",45,29 `

**Важные моменты при миграции из CSV:**

1. Названия колонок в файле и в таблице необязательно совпадают.
2. Файл содержит заголовок, который не нужно импортировать.
3. Первые 2 колонки конвертируем из строк (string) в целые числа (int).

PostgreSQL позволяет импортировать данные из файла несколькими способами:

1. Командой `copy`.
2. Через функции pl/pgsql.
3. Средствами другого языка, например Python.

Воспользуемся первым способом.

Сначала нам понадобится создать таблицу, в которую будет осуществлена миграция данных. Подключитесь к БД согласно инструкциям выше. Выполните следующую команду:

` 
CREATE TABLE dtm (
    id serial PRIMARY KEY,
    depot int NOT NULL,
    store int  NOT NULL,
    time int NOT NULL,
       distance int  NOT NULL
);`

Загрузите данные: `\copy dtm(depot,store,time,distance) from '/<путь к файлу>/DTM.csv' DELIMITERS ',' CSV HEADER;`

> путь к файлу:
>
> 1. файл должен быть на машине, которая может связаться с хостом. 
>    в моем случае, хост не паблик, а значит к нему имеет доступ только ВМ в сети хоста.
>
> 2. Чтобы создать файл через консоль: 
>
>    echo ""depot","store","time","distance"
>    "100","101",31,12
>    "100","102",38,17
>    "100","103",56,33
>    "100","104",70,60
>    "100","105",41,25
>    "100","106",21,8
>    "100","107",33,14
>    "100","108",62,42
>    "100","109",45,29" > dtm.csv
>
> 3. Узнать путь к файлу: find
>
> Тупо создавать файл на своем пк и пытаться скопировать из него данные, посылая запрос на поиск этого файла в консоли ВМ и получая ошибку No such file or directory. Просто еблан....

В этой команде мы учли те моменты, о которых говорили вначале:

1. dtm (depot, store, time, distance) маппинг колонок связывает колонки в файле с колонками в таблице, их имена могут не совпадать
2. CSV HEADER показывает, что заголовок импортировать не нужно
3. Колонки в таблице уже имеют правильные типы данных, конвертация будет выполнена автоматически.

> В консоли управления на странице кластера перейдите на вкладку **SQL**. Введите пароль пользователя БД и нажмите кнопку **Подключиться**.  Выберите таблицу `dtm`, чтобы убедиться, что добавление данных выполнено правильно.

### Репликация

> Всё ломается не только в физическом мире — виртуальные машины тоже выходят из строя. Чтобы решить проблему сохранности и доступности БД, можно создать несколько хостов и поместить на каждый её копию. Это повысит отказоустойчивость системы и даже улучшит её производительность, поскольку запросы распределятся между хостами. Однако в этом случае возникает новая задача: **синхронизировать данные**.

Механизм синхронизации копий БД внутри кластера называют **репликацией**. 

> В различных СУБД он реализуется по-разному (ниже мы кратко остановимся на основных его видах). Выбор решения зависит от задачи и должен учитывать размер системы, требования к скорости ее работы, критичность потери даже небольшого фрагмента данных.

Различают **асинхронную** и **синхронную** репликации. 

Асинхронный механизм допускает задержку между подтверждением транзакции (целостного выполнения связанных между собой операций) на одном хосте и её передачей на другие хосты. Это ускоряет работу, но данные при сбое могут быть потеряны. Такой подход реализован в БД ClickHouse.

![image](https://pictures.s3.yandex.net/resources/1_67_1627586729.png)

В кластерах PostgreSQL используется синхронная репликация. 

В этой классической СУБД запись в БД происходит на хосте-мастере. Остальные хосты в кластере — реплики, для них доступны только операции чтения данных. Транзакция подтверждается лишь тогда, когда данные записаны на диск и на хосте-мастере, и на всех репликах. Это повышает надёжность системы, но может заметно (на 25−30%) снизить скорость ее работы по сравнению с асинхронным режимом.

Асинхронная и синхронная репликации — это виды **физической** репликации, при которой изменённые блоки данных побайтово копируются с диска одного хоста на диск другого.

В PostgreSQL также реализован метод **логической** репликации. Его основное отличие от физической заключается в том, что вместо последовательностей байтов копируются таблицы и строки.

При логической репликации используются **публикации и подписки**. 

Один экземпляр БД (подписчик) подписывается на изменения в другом экземпляре (публикующем узле) и получает от него данные. Изменения на стороне публикующего узла передаются подписчику в реальном времени, публикациям в рамках подписки гарантируется транзакционная целостность (т. е. результат транзакции записывается в БД только тогда, когда все операции транзакции успешно завершены).

Подписчик, в свою очередь, также может публиковать данные, что позволяет организовать **каскадную** репликацию. В этом случае хост-мастер синхронизируется только с одной репликой, которая затем используется для синхронизации с другими репликами группы. Такой подход позволяет заметно уменьшить транзакционную нагрузку на хост-мастер.

![image](https://pictures.s3.yandex.net/resources/2_23_1626202093.png)

С помощью репликации можно перенести данные из вашей базы в управляемую БД PostgreSQL.

Механизм подписки, на котором построена логическая репликация, позволяет перенести данные на кластер с минимальным простоем.

Логическая репликация поддерживается начиная с версии PostgreSQL 10 и выше. Вы можете переносить данные и между одинаковыми версиями, и на более свежие версии. Для этого настройте репликацию с сервера-источника на сервер-приёмник с более свежей версией СУБД.

В кластере Managed Service for PostgreSQL подписки может применять пользователь, созданный одновременно с кластером, и пользователи с ролью `mdb.admin` для этого кластера.

### Миграция данных в облако репликацией

Предположим, вы решили перенести БД в сервис управляемых БД PostgreSQL. Для этого придётся выполнить **логическую репликацию**:

1. Настроить сервер с источником данных.
2. Экспортировать схему БД из источника.
3. Создать кластер Managed Service for PostgreSQL и восстановить схему БД.
4. Создать публикации и подписки.
5. Перенести PostgreSQL-sequences после репликации.
6. Отключить репликацию и перенести нагрузки.

Как видите, процесс довольно трудоёмкий. Разберём его по шагам.

**1. Настройка сервера с источником данных**

Чтобы перенести данные с помощью репликации, настройте PostgreSQL на сервере-источнике. Измените настройки SSL и WAL (Write Ahead Log) в файле `postgresql.conf` (в Ubuntu путь к нему по умолчанию — `/etc/postgresql/10/main/postgresql.conf`).

Для переноса данных используйте SSL: это поможет не только зашифровать данные, но и сжать их. Подробнее читайте в документации PostgreSQL: разделы [SSL Support](https://www.postgresql.org/docs/current/libpq-ssl.html) и [Database Connection Control Functions](https://www.postgresql.org/docs/current/libpq-connect.html).

Включите использование SSL:

**НЕ СМОГ**

### Data Transfer. Инструмент для миграции баз данных

> Как вы могли убедиться на предыдущем уроке, миграция данных бывает довольно трудоёмкой.

Сервис Yandex Data Transfer позволяет ускорить миграцию и минимизировать простой при переключении на новую БД. Чтобы перенести данные, вам не нужно устанавливать драйверы: вся настройка делается в консоли управления. При этом исходная и целевая БД должны быть одинаковы, а структуры схем, типы данных и коды — совместимы.

Сервис можно использовать не только для миграции данных, но и для других задач.

**Тестирование Yandex Cloud**

Если вы тестируете сервисы управляемых БД MySQL и PostgreSQL, то лучше делать это на реальных данных. С помощью Data Transfer легко перенести данные в эти сервисы.

**Аварийное восстановление**

Data Transfer позволяет организовать миграцию данных из Yandex Cloud в локальную БД. На вашем сервере всегда будет актуальная копия данных, пригодная для аварийного восстановления.

**Организация разработки и разделение нагрузки**

Если разработчики, тестировщики или аналитики вашего продукта используют инфраструктуру Yandex Cloud, то вы быстро организуете окружение для нового участника. За актуальную копию данных в окружении отвечает Data Transfer.

Схема работает и в обратном направлении, когда актуальная стабильная версия сервиса базируется в Yandex Cloud, а для организации рабочего процесса необходима реплика данных в локальных базах. При этом основная БД не будет испытывать лишнюю нагрузку.

**Разделение и объединение БД**

С помощью Data Transfer можно разделить БД и в каждую новую базу можно перенести разный набор таблиц исходной базы. Также с его помощью можно объединить несколько БД. Например, при миграции в Yandex Cloud вы соберёте данные в единую БД в одном из сервисов управляемых БД. Объединяются только однородные БД.

Основные понятия сервиса — **эндпоинт** и трансфер.

**Эндпоинт** — это конфигурация для подключения к БД. Эндпоинты доступны для следующих БД:

> - Пользовательская БД BigQuery.
> - БД ClickHouse — пользовательская или в составе сервиса Managed Service for ClickHouse.
> - БД Greenplum — пользовательская или в составе сервиса Managed Service for Greenplum.
> - БД MongoDB — пользовательская или в составе сервиса Managed Service for MongoDB.
> - БД MySQL — пользовательская или в составе сервиса Managed Service for MySQL.
> - Пользовательская БД Oracle.
> - БД PostgreSQL — пользовательская или в составе сервиса Managed Service for PostgreSQL.
> - ЫБД Managed Service for YDB — в составе сервиса Managed Service for YDB.

Эндпоинты делятся на два типа:

1. Источник описывает настройки БД, откуда передаётся информация.Ы
2. Приёмник описывает настройки БД, куда переносится информация.

**Трансфер** — это перенос данных из источника в приёмник. Трансфер должен находиться в одном каталоге с эндпоинтами, которые соединяет.

Сведения о совместимости источников и приемников при трансфере приведены в [документации](https://cloud.yandex.ru/docs/data-transfer/concepts/#connectivity-matrix).

Трансферы бывают следующих типов:

**Копирование** — перенос снапшота (моментального снимка) БД.

**Репликация** — непрерывное получение изменений из БД источника и применение их к БД приёмника.

**Копирование и репликация** — перенос состояния базы источника в базу приёмника и поддержка этого состояния.

При копировании скорость достигает 15 МБ/с. База размером 100 ГБ скопируется за 2–3 часа. При репликации пропускная способность составляет 20–30 тысяч транзакций в секунду.