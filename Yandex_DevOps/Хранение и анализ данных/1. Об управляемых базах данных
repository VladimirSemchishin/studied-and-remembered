### Введение

В Yandex Cloud для работы с данными используются:

- сервисы управляемых баз данных (БД), таких как : PostgreSQL, MySQL, MongoDB, ClickHouse и других, 
- сервис управления кластерами **Yandex Data Proc**, 
- сервис визуализации и анализа данных Yandex DataLens 
- масштабируемое хранилище данных Yandex Object Storage. 

Вместе они образуют группу сервисов «[Платформа данных](https://cloud.yandex.ru/services#data-platform)».

**Виртуализация баз данных**

это их размещение на виртуальных машинах в облаке.

> Когда разрабатывают веб-приложения, для хранения структурированных данных чаще всего выбирают одну из популярных БД (например PostgreSQL или MySQL). Разработчикам и администраторам предстоит решить, на каких серверах её развернуть: на собственных, арендованных или в облаке. От выбора зависит, кто будет поддерживать и обслуживать серверы и БД.
>
> Использование своих серверов обходится недёшево. Для их обслуживания понадобятся оборудование и квалифицированные специалисты. С примерным расчетом стоимости владения вы можете ознакомиться [в этой статье](https://cloud.yandex.ru/blog/posts/2021/03/mdb-advantages#price).

В Yandex Cloud вы можете развернуть БД двумя способами: 

- Поверх виртуальных машин 

  - плюсы: экономия на работы облачного провайдера и сами контролируем как все работает
  - минусы: много самостоятельной работы

  > Нужно будет:
  >
  > 1. создать ВМ
  > 2. установить БД и программы
  > 3. создать конфигурационные файлы
  > 4. настроить сеть
  >
  > При необходимости: 
  >
  > - если ВМ несколько - настроить репликацию
  > - резервное копирование
  > - отслеживать работы ВМ и БД
  > - устанавливать обновления БД и ОС
  > - если ВМ или БД перестанут работать повторить 1- 4 шаги

- С помощью сервисов управляемых БД (managed services for databases).

  > При использовании этих сервисов вы будете настраивать БД через консоль управления в браузере, интерфейс командной строки Yandex Cloud CLI или Yandex Cloud API, а подключаться к БД из приложений (точно так же, как к обычным БД).

  Сервисы:

  - автоматически отслеживают производительность, отвечают за резервное копирование, восстановление, обновление;
  - обеспечивают надёжную работу БД и операционной системы, безопасность данных и репликацию;
  - позволяют за несколько минут получить готовый к работе кластер или добавить в него виртуальные машины.

  - плюсы: не нужно отвлекаться на администрирование

  - минусы: дороже чем ВМ

### Кластеры, масштабируемость, доступность и отказоустойчивость 

Чтобы работать с БД в Облаке: 

- создавать, 
- записывать, 
- запрашивать и переносить данные между ними, 
- создавать резервные копии восстанавливаться из них

Необходимо  понимание основных концепций:

- **Кластеры**

  Использование управляемой БД начинается с создания кластера. 

  **Кластер** — это одна или несколько виртуальных машин (или хостов), где разворачивается БД.

  > При создании кластера вы увидите в интерфейсе настройки по умолчанию. Они позволяют быстро начать работу, не выставляя вручную каждый параметр. К тому же большинство настроек (например число ядер процессора, объём памяти и размер дискового пространства) можно изменить позже. Тогда сервис автоматически поочерёдно отключит хосты, применит изменения и включит хосты обратно. БД при этом будет недолго доступна только для чтения.

  Значения некоторых настроек определяются размером кластера и зависят от числа ядер или объёма оперативной памяти. 

  > Например, лимит `max_connection` (максимальное число соединений с БД) в управляемой БД PostgreSQL — 200 соединений на один виртуальный процессор (vCPU).

  Единственный параметр, который не стоит пропускать при создании кластера, — это настройка **Окружение**. Она глобально влияет на кластер, и ее нельзя будет изменить.

  Окружение бывает (ключевое отл. как обновляется ПО, упр-щее БД):

  - `PRESTABLE`

    при обновлениях не гарантируется обратная совместимость и иногда содержит ошибки

    > Мажорные и минорные обновления СУБД, а также обновления, касающиеся работы сервиса управляемых БД, сначала попадают в окружение `PRESTABLE`. В нём обновления не гарантируют обратную совместимость и иногда содержат ошибки. Поэтому используют `PRESTABLE` для сред разработки и тестирования, чтобы обкатывать новые приложения и функциональности.

  - `PRODUCTION`

    В окружение `PRODUCTION` попадают только проверенные и стабильные обновления. Выбирайте его для той версии приложения, которая полноценно запущена и доступна пользователям.

- **Мастшатбирование**

  БД можно масштабировать двумя способами: 

  - вертикально

    меняется количество ядер и объём жёсткого диска на хосте, где работает база данных.

    > Например, вы можете поменять тип хоста с `s2.medium` (8 ядер и 32 ГБ оперативной памяти) на `s2.x4large` (40 ядер и 160 ГБ оперативной памяти) и увеличить объём диска на 50 ГБ. Такая операция занимает всего несколько минут. У этого способа, однако, есть предел: очередное увеличение станет или слишком дорогим, или технически невозможным.

  - горизонтально

    меняется число хостов, между которыми распределена нагрузка на БД. 

    > Такой способ поддерживают не все СУБД, но если эта возможность есть, то с технической точки зрения уже неважно, сколько хостов вы добавляете.
    >
    > Производительность и объём диска одного хоста бывают небольшими, но каждый хост обрабатывает лишь часть общей нагрузки и хранит часть общих данных. Такая система может быть эффективнее, чем один большой и мощный сервер.

- **Доступность** 
  способность работать беспрерывно - обычно измеряется в процентах и вычисляется как часть времени, когда система полноценно функционировала. 

  > Например, доступность 99,99% означает, что БД может не отвечать на запросы лишь 0,01% времени (за 30-дневный месяц это 4 минуты 19 секунд).

  Сервисы управляемых БД улучшают доступность приложения или сайта. Когда вы разворачиваете БД на одном из хостов кластера, сервис автоматически её реплицирует (создает копии (реплики) основной базы (мастера) на остальных хостах и синхронизирует данные между мастером и репликами.) Если хост выйдет из строя, реплики (копии) будут доступны на чтение, до момента восстановления хоста.

  >  Более того, вам не придется останавливать кластер, чтобы обновить операционную систему или СУБД. Сервис выполнит все обновления незаметно для вас, поочерёдно отключая хосты и распределяя нагрузку между ними.

  Кластер можно настроить так, что любой хост может при необходимости стать мастером - это **кластеры высокой доступности**  (high-availability cluster)

- **Отказоустойчивость** 

  это другими словами 100% доступность. Такая система продолжает работать если любой компонент выходит из строя, при помощи большой избыточности ресурсов. 

  Чтобы сделать кластер отказоустойчивым, мы можем увеличить в нём число хостов и разнести их по разным зонам доступности. Это поможет избежать отказов на уровне дата-центров.

> Какую систему строить: высокодоступную или отказоустойчивую? Это зависит от ваших приоритетов. В первом случае мы допускаем, что система сломается и недолгое время будет недоступна. Во втором — делаем всё возможное, чтобы система работала, даже если какой-то из её элементов выйдет из строя. В том числе добавляем избыточные ресурсы и тратим на них немалые деньги (каждый дополнительный хост стоит столько же, сколько хост-мастер). Решайте сами, за какие проценты доступности и сколько вы готовы платить.

### Реляционные базы данных

БД позволяет сохранять данные, извлекать из них те, которые нужны, и передавать пользователю, делятся они реляционные и нереляционные.

> Поскольку и данные, и задачи пользователей различны, разработано довольно много систем управления базами данных ([примерно 850](https://dbdb.io/)).

**Реляционная БД** — это набор таблиц и связей между ними.

> Если мы разрабатываем мессенджер, то нам понадобится хранить в БД сведения обо всех пользователях, чатах и сообщениях. 
>
> Данные нужно чётко структурировать и свести в связанные между собой таблицы. В одной таблице будут данные о пользователях (ID, ник, ссылка на аватарку, номер телефона и город проживания), в другой — о сообщениях (номер, текст, кто, кому и когда написал сообщение, в каком чате, прочитано ли оно). [ссылка на картинку](https://practicum.yandex.ru/trainer/ycloud/lesson/089c1ae5-2e0b-480c-9ae1-e0a4c3579127/) 

Для работы с реляционными БД используется **SQL** (**Structured Query Language** — структурированный язык запросов).

> В сервисах Yandex Cloud представлены популярные реляционные СУБД MySQL и PostgreSQL. Эти СУБД организуют данные одинаково, но у каждой есть сильные и слабые стороны, которые могут проявляться в прикладных задачах.

**MySQL**

самая популярная в мире СУБД с открытым исходным кодом, проста и для упрощения написания запросов ее синтаксис не полностью соотв. последним версиям стандарта и соглашения этого языка. 

Популярна у стартап-команд и PHP-разработчиков 

Эта СУБД входит в классический набор серверного программного обеспечения LAMP (Linux, Apache, MySQL, PHP)

> У LAMP есть вариации, в которых одни компоненты заменяются другими. Например, в LEMP вместо Apache используется веб-сервер NGINX.

**PostgreSQL**

вторая по пупялорности, ее синтаксис полностью соотв стандартам SQL (по этому не прост). От других СУБД PostgreSQL отличает множество настроек, продвинутая система репликации и поддержка большого числа типов данных.

Еще одно отличие от MySQL — механизм курсоров. Если MySQL отдаёт сразу все запрошенные данные, то PostgreSQL сохраняет ответы на запросы в памяти, а пользователь получает указатель (курсор) для перемещения по данным.

PostgreSQL используют компании, которые работают над проектами со сложными операциями над множеством данных, избегают vendor lock-in и могут держать в штате специалиста по БД.

> Всё это становится преимуществом при решении сложных задач, когда приходится оптимизировать запросы или тонко настраивать БД. Вместе с тем разнообразные настройки и сложный синтаксис языка запросов требуют более глубоких знаний и опыта.
>
> vendor lock-in - зависимость от продукта одного поставщика, от которого сложно избавиться, потому что переход на другой продукт слишком дорого стоит. 



**Реляционные БД не всегда являются лучшим инструментом,** потому что:

- нестабильно работают при смешанной нагрузке, когда операции чтения и записи соотносятся примерно 1 : 1;
- плохо масштабируются;
- данные не всегда укладываются в жёсткую структуру таблицы (пример: медицинские карты пациентов поликлиники).

Из-за этого для решения многих задач используют нереляционные БД.

### Неряляционные базы данных

Нереляционные (NoSQL) БД обеспечивают высокую доступность, быстро работают и хорошо масштабируются. Однако зачастую это достигается за счет ограничения транзакционных возможностей, которыми славятся реляционные базы.

В Yandex Cloud входят:

- **MongoDB**

  самая популярная NoSQL БД в мире

  данные не организуются в таблицах (как у реляционных), а хранятся в документах, которые группируются в коллекции.Это позволяет работать с данными с разными наборами полей (т.к. данные плохо укладываются в жёсткую структуру таблицы).

  MongoDB позволяет шардирование - размещение частей БД на разных хостах (по этому ее легко масштабировать)

  > СУБД хранит данные в документах схожего с JSON формата, поэтому хорошо сочетается с JavaScript-фреймворками и широко применяется при разработке JavaScript-совместимых серверной и клиентской частей приложений. 

  Входит в стек технологий MEAN (MongoDB, Express.js, Angular.js, Node.js).

  > MongoDB удобно использовать, например, для хранения каталога товаров или в системах управления контентом.

- **Redis**

  Remote Dictionary Server - хранилище данных типа key-value (ключ-значение) с открытым исходным кодом. 

  > В key-value хранилище хранятся пары ключей и значений. Ключ в паре — это идентификатор, а значение — любые данные: число, строка или сложный объект.

  В Redis вместо SQL в запросах используются скрипты на языке Lua. 

  В отличие от других подобных хранилищ, Redis поддерживает больше типов данных (строки, списки, хеш-таблицы, упорядоченные и неупорядоченные множества, битовые массивы и др.) и операций с ними.

  Он хранит данные в оперативной памяти и по этому обеспечивает очень высокую скорость - 1000000 операций в секунду. Но получаются 2 ограничения:

  - объем хранимых данных не может быть выше размера оперативной памяти
  - при сбое, все что не сохранилось - потеряно.

  >  Эти особенности и определяют задачи, подходящие для Redis: хранение данных сессий в веб-приложениях, кеширование, генерирование таблиц результатов в многопользовательских играх.

- **ClickHouse**

  это столбцовая СУБД для онлайн-обработки аналитических запросов.

  Данные в ClickHouse организованы в таблицах и жестко структурированы. Но в отличие от реляционных БД, которые хранят на диске рядом друг с другом значения всех свойств одного объекта (строку таблицы), в столбцовых СУБД рядом хранятся значения одного свойства всех объектов (столбец).

  ClickHouse способна читать сотни миллионов записей в секунду

  эта СУБД не поддерживает транзакции и точечное изменение или удаление записей (данные в базе изменяются и удаляются большими порциями).

  > Благодаря такому способу хранения можно очень быстро выполнять запросы, в которых исследуются не все свойства объекта, а только некоторые из них. При поиске в строковых БД требуется просканировать всю таблицу, а строки читаются с диска или из памяти целиком, даже если из них нужно взять лишь одну ячейку. В столбцовых БД поиск идет по столбцам, извлекаются только нужные значения.

- **Elasticsearch**

  это нереляционное хранилище данных с широким набором функций полнотекстового поиска.

  Данные в Elasticsearch хранятся в виде документов в формате JSON. Они автоматически индексируются, размер индекса составляет от 20 до 30% размера БД. Благодаря этому достигается скорость чтения в сотни миллионов записей в секунду. Для взаимодействия с БД используются JSON-запросы в RESTful API, а в качестве языка запросов — Querydsl.

  > Elasticsearch хорошо масштабируется, что позволяет работать с большими объёмами данных. При этом она не обеспечивает транзакционную целостность, а запись данных в БД и их удаление не отличаются высокой производительностью.

  Основное назначение Elasticsearch — полнотекстовый поиск в большом объёме документов. 

  > Эта СУБД широко применяется для аналитической обработки больших массивов данных, анализа логов и журналов работы приложений, функций автозавершения и умного ввода текста.



**YDB**

распределённая СУБД от Яндекса, относится к типу NewSQL

> основана на реляционной модели, но обеспечивает отказоустойчивость, доступность и масштабируемость на уровне NoSQL-решений.

В YDB данные организуются в таблицы, обеспечивается их транзакционное изменение и строгая консистентность, запросы пишутся на диалекте SQL.

> При этом YDB изначально разрабатывалась для так называемых OLTP-сценариев (On-Line Transaction Processing). Это задачи, где СУБД должна поддерживать транзакции и консистентность данных, как это делают классические реляционные СУБД, но при этом надёжно и быстро работать с объёмными БД (т. е. иметь возможность масштабироваться) и с большим числом одновременных запросов на чтение и на запись.

YDB может использоваться в двух режимах: 

- режиме бессерверных вычислений 

  > подходит для небольших систем с незначительной нагрузкой, когда держать виртуальные машины с БД невыгодно с финансовой точки зрения.

- режиме с выделенными виртуальными машинами. 



**Apache Kafka**

разработка компании LinkedIn, сочетание распределённой БД и очереди сообщений. 

Формально Apache Kafka определяется как распределённая стриминговая платформа, т. е. система, управляющая потоками данных между сервисами.

> Cерверные приложения часто состоят из множества сервисов. Одни из них генерируют, а другие получают данные. Важно, чтобы даже сотни тысяч сообщений в секунду передавались надёжно.
>
> Для этого используют очередь сообщений. 
>
> Одни сервисы генерируют сообщения и отправляют их Apache Kafka, а другие считывают сообщения тогда, когда удобно, и тем самым снижают нагрузку на систему. 
>
> До доставки сообщения хранятся в БД, которая размещается на нескольких хостах.



### Выбор базы данных

[картинка](https://practicum.yandex.ru/trainer/ycloud/lesson/d7a47e04-ff70-497b-97e2-c938ab93f66d/) помогающая выбрать 

Для ответа на вопрос какую БД выбрать, необходимо учитывать несколько факторов:

- возможность легко масштабировать систему
- структура данных (если в планах активно развивать свое приложение, то она на вряд ли будет жесткой)
- необходимость реализации транзакций
- отсутствие (или очень малое число) сложных аналитических запросов
- работа под смешанной нагрузкой 