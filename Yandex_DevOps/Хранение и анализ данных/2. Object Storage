### Object Storage и S3-совместимые хранилища

**Объектное хранилище** (англ. object storage) — облачная система хранения данных произвольного формата. 

**Объекты** этой системы - привычные файлы, у каждого объекта есть уникальный индентификатор (аналог имени файла) и метаданные (доп. сведения). 

> Индентификатор помогает различить объекты, а в метаданных хранятся, например дата создания и MD5-хеш.

**Идентификатор объекта** — это строка. Ее часто записывают как путь в файловой системе, используя символ `/` как разделитель. 

> Например, `archive/2020/ivanov/x-ray.jpg`

Но важно понимать: на самом деле иерархии в объектном хранилище нет, оно плоское. За счет плоскости достигается большая скорость поиска по сравнению с файловой системой.

> Благодаря этому файловые браузеры при работе с объектами имитируют привычное нам дерево папок. В консоли управления Yandex Cloud тоже есть такая возможность — части пути называются папками.

Внутри хранилища объекты группируются в **бакеты** - они позволяют разделять данные разных проектов или пользователей.  

> У каждого бакета в Yandex Cloud уникальное имя. Переименовать бакет нельзя, поэтому выбирайте имя для бакета с умом.

**С практической точки зрения объектные хранилища** имеют некоторые важные особенности:

- они рассчитаны, прежде всего, на взаимодействие с приложениями через HTTP API, а не напрямую с пользователем;
- объекты в них не редактируются. Чтобы изменить объект, придётся загрузить в хранилище новую версию. Это неудобно, если объекты большие или часто изменяются.



**Класс хранилища** 

Размер [оплаты](https://cloud.yandex.ru/docs/storage/pricing) за использование объектного хранилища зависит от количества данных, операций с ними и исходящего трафика. Первый гигабайт и первые десятки тысяч операций бесплатные.

Вибирать **классс хранилища**  - стандартное или холодное - нужно в зависимости от количества данных и запросов к ним:

- **Много данных, редкие запросы** (например, резервные копии)
  - *<u>Рекомендуемый класс хранилища</u>*
    холодное 
  - *<u>Тариф на хранение данных</u>*
    низкий
  - <u>*Тариф на обращение к данным*</u>
    высокий

- **Мало данных, частые запросы** (например, аватарки пользователей приложения)
  - *<u>Рекомендуемый класс хранилища</u>*
    стандартное
  - *<u>Тариф на хранение данных</u>*
    высокий
  - <u>*Тариф на обращение к данным*</u>
    низкий

Класс хранилища выбирается при загрузке объекта в бакет. Если этого не сделать, то объект сохранится в хранилище того класса, который выбран для всего бакета

> Класс хранилища для бакета можно изменить в консоли управления. Если объект загружен, изменить его класс хранилища нельзя: можно либо загрузить объект заново, либо задать правило, управляющее жизненным циклом объекта. Настраивать жизненный цикл вы научитесь на практическом занятии.

**S3-совместимость**

Сервис Yandex Object Storage — **S3-совместимое хранилище**. 

Его API совместим с Simple Storage Service API (S3 API), который был создан компанией Amazon в 2006 году и де-факто стал стандартом облачного хранения данных. 

S3-совместимость позволяет использовать в Yandex Cloud популярные инструменты для работы с S3-протоколом: 

- консольные клиенты S3cmd и AWS CLI, 
- файловые браузеры Cyberduck и WinSCP, 
- библиотеки (SDK) для Python и Java.

**Возможности и преимущества объектного хранилища**

Объектное хранилище — общепринятый способ хранения неструктурированных данных в облаке. Преимущества объектного хранилища:

- масштабируемость

  > размер системы архитектурно не ограничен, она может содержать любой объём данных;

- более высокая производительность при упр. большими объемами данных по сравнению с иерархическими файловыми системами

- отказоустойчивость 

  > копии данных хранятся в нескольких географически распределённых дата-центрах;

- возможность использовать метаданные

  > - метаданные, позволяющие искать, сортировать и анализировать неструктурированные данные;

- невысокая стоимость хнаренения данных

> Используйте сервис Yandex Object Storage, чтобы разместить файлы любого формата для своего проекта (приложения или сайта) в закрытом или публичном доступе, хранить объёмные архивы (до 5 терабайт на файл), контролировать доступ к данным и организовать совместную работу с ними.

Имеет ли смысл положить в объектное хранилище файл с очень большой базой данных SQLite, если к ней идет много запросов на чтение и лишь немного на запись?

> Нет. Объекты в хранилище не изменяются. Чтобы внести в объект изменения, нужно закачать в хранилище его новую версию. Для очень большого объекта, который будет изменяться, пусть даже нечасто, так лучше не делать.

### Метаданные

**метаданные** — сведения о его свойствах.

Метаданные представляются в виде пары «имя: значение». 

Например, так записывается дата и время загрузки объекта в хранилище:

`Date: Fri, 5 Mar 2021 14:00:00 GMT` 

Метаданные бывают:

- **пользовательскими** 
  (их имена и значения вы добавляете и меняете сами) 

- **системными** 
  (их устанавливает сервис)

  > Например, дата создания или последнего изменения объекта, его размер, MD5-хеш — это системные метаданные. Их полный список вы найдете в [документации](https://cloud.yandex.ru/docs/storage/concepts/object#system-meta).

> Предположим, клиника хранит в облаке рентгеновские снимки пациентов. К каждому снимку (объекту) вы добавляете метаданные: Ф. И. О. пациента, номер медицинской карты, дату обследования, код диагноза, модель рентгенаппарата, Ф. И. О. проводивших обследование специалистов.

> Задав много метаданных, вы сможете легко находить, сортировать и анализировать объекты. Например, врачи быстро узнают, какие пациенты получили избыточное облучение, если выяснится, что один из рентген-аппаратов барахлит, или проследят динамику заболеваемости воспалением легких у пожилых женщин с разбивкой по месяцам.

Пользовательские метаданные передаются в облачное хранилище при загрузке объекта в HTTP-заголовках запроса. <u>Имена заголовков с пользовательскими метаданными при этом должны начинаться с префикса</u> `x-amz-meta-`:

`PUT /images/image0349.dat HTTP/1.1 `

 `Host: hospital.storage.yandexcloud.net `

 `Content-Length: 1403256 `

 `Date: Sat, 20 Mar 2021 14:15:02 GMT `

 `Authorization: *...* `

 `x-amz-meta-Patient-Surname: Petrov `

 `x-amz-meta-Patient-ID: 4536 `

 `*...* `

При запросе объекта сервис возвращает метаданные в виде таких же HTTP-заголовков с префиксом `x-amz-meta-`:

`HTTP/1.1 200 OK`

` Server: nginx ` 

`Date: Tue, 23 Mar 2021 10:12:15 GMT `

`Content-Type: image/dat `

`Content-Length: 1403256 `

`Connection: keep-alive `

`Keep-Alive: timeout=60 `

`Accept-Ranges: bytes `

`Last-Modified: Sat, 20 Mar 2021 14:15:02 GMT `

`x-amz-meta-patient-surname: Petrov `

`x-amz-meta-patient-id: 4536 `

`... `

> **Важно!** До загрузки вы можете указывать имена метаданных объекта и прописными, и строчными буквами (хоть ABC, хоть abc). Однако после загрузки в хранилище они станут строчными (только abc). Таким образом, хранилище посчитает метаданные с именами Patient-ID и patient-id одинаковыми.

Пользовательские метаданные загруженных объектов тоже можно добавлять или изменять. Вы научитесь делать это на ближайшем практическом уроке.

### Управление доступом

> Чтобы система хранения рентгеновских снимков в облаке работала надёжно и с врачебной тайной не возникало проблем, необходимо ограничить доступ к снимкам. Уровень доступа у всех должен быть разным, чтобы врачи могли просматривать снимки, рентгенологи — и просматривать, и загружать, а сисадмин — настраивать объектное хранилище.

В объектном хранилище Yandex Cloud **для контроля доступа используются три независимых механизма**:

- (**IAM**, Identity and Access Management) 

  > сервис управления доступом, работает на уровне всего облака;

- (**ACL**, Access Control List) 

  > список управления доступом, работает на уровне бакетов и объектов;

- (Bucket Policy) 

  > политика доступа, задаёт условия доступа к бакетам и объектам.

**IAM**

С основами работы IAM вы познакомились [Облачные технологии, сервисы и что внутри облака (Доступ к ресурсам)](https://praktikum.yandex.ru/trainer/ycloud/lesson/6698ff6a-8349-4bc9-8e4b-7242b4e9e05b). 

IAM проверяет все операции в Yandex Cloud и управляет доступом на основе ролей. 

**Роль** - это по сути набор разрешений, которые описывают допустимые операции. 

Если разрешения нет, сервис сообщит об ошибке.

> Помните, что роли действуют и на вложенные ресурсы. Если вы дадите системной группе `allUsers` (все пользователи интернета) или `allAuthenticatedUsers` (все пользователи, прошедшие аутентификацию в Yandex Cloud) права доступа к облаку или каталогу с объектным хранилищем — пользователи получат доступ ко всем бакетам в нем.

На схеме ниже показано, какие роли дают разрешение на действия в объектном хранилище и как роли наследуют разрешения друг друга. Список разрешений, входящих в каждую роль, смотрите в [документации](https://cloud.yandex.ru/docs/storage/security/).

![image-20230323155539492](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230323155539492.png)

> Чтобы настроить права доступа к рентгеновским снимкам, врачам нужно выдать роль `storage.viewer`, рентгенологам — `storage.uploader`, а сотруднику, отвечающему за систему хранения, — `storage.admin` или `storage.configurer` в зависимости от ситуации.

**ACL**

— это тоже список разрешений на действия. 

Но в отличие от IAM, он распространяется не на всё облако, а только на объектное хранилище. С помощью ACL можно разрешить:

- операции чтения для объектов и бакетов (READ);
- операции записи, перезаписи и удаления объектов (WRITE);
- полный доступ к объектам и бакетам (FULL_CONTROL).

Разрешения в ACL соответствуют ролям пользователей в сервисе IAM. 

> Например, разрешение FULL_CONTROL соответствует роли `admin`. ACL используется в объектном хранилище для S3-совместимости, а также чтобы быстро предоставлять доступ к объектам или бакетам.

С помощью ACL можно выдать разрешения пользователям Yandex Cloud, сервисному аккаунту и системным группам `allUsers` и `allAuthenticatedUsers`. Чтобы выдать разрешение, надо знать [идентификатор его получателя](https://cloud.yandex.ru/docs/storage/concepts/acl#accounts-ids).

Подробности об ACL вы найдете в [документации](https://cloud.yandex.ru/docs/storage/concepts/acl).

**Политика доступа**

С помощью политики доступа настраиваются дополнительные условия действий с бакетами и объектами. Вы можете, например, запретить доступ к бакету из конкретного диапазона IP-адресов.

Элементы политики доступа:

- **ресурс** — бакет, префикс (условный «путь» в идентификаторе объекта) или объект;
- **действие** — запрошенная операция над ресурсом;
- **результат** — запрет (Deny) или разрешение (Allow) действия;
- **пользователь** — тот, кто запрашивал выполнение операции;
- **условие** — случаи, когда политика действует;
- **принцип выбора** — включить или исключить пользователей.

Если для обеспечения безопасности и конфиденциальности данных вы разрешаете пользователям просматривать снимки только по защищённому соединению, то политика доступа будет выглядеть так:

`{  "Id": "epd4limdp3dgec7enpq5"  `

 `		"Version": "2021-01-15",  	`		

 `"Statement": [`

 	`    {      `    

 		`"Sid": "f1qqoehl1q53l06kqurs",      `

 		`"Effect": "Allow",      `

 		`"Principal": "*",      `

 		`"Action": "s3:GetObject",      `

 		`"Resource": "arn:aws:s3:::hospital/*",      `

 		`"Condition": {        `

 			`"Bool": {          `

 				`"aws:SecureTransport": "true"        `

​			`}      `

 		 `}    `

 	 `}  `

​	`] `

 `} `

Подробности о том, как настраивать политики доступа, вы найдете в [документации](https://cloud.yandex.ru/docs/storage/concepts/policy).

**Как применяются механизмы контроля доступа**

Разрешение на доступ к объекту проверяется на трех уровнях: в сервисе IAM, в политике доступа и в списке разрешений ACL. Система контроля доступа построена по принципу «запрещено всё, что не разрешено»: доступ даётся только тогда, когда есть хотя бы одно разрешающее правило и нет ни одного запрещающего.

![image-20230323160632645](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230323160632645.png)

Механизмы контроля доступа применяются в таком порядке:

![image-20230323160703635](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230323160703635.png)

> Например, если запрос не прошел проверку IAM (нужная роль не назначена и разрешения на доступ нет), но доступ к объекту открыт с помощью ACL, то запрос будет выполнен, поскольку есть одно разрешение на доступ и нет явных запретов.

**Какой механизм контроля доступа выбрать**

Это зависит от ситуации.

- **Проверка через IAM выполняется всегда.** Назначьте пользователям вашего хранилища соответствующие роли.

  > Для несложных сценариев (когда вы хотите знать, что может делать в хранилище конкретный пользователь) этого зачастую достаточно.

- **Политика доступа управляет доступом по дополнительным критериям.** Выбирайте её, если вам важно, при каких условиях разрешаются действия с бакетом или объектами.

- **ACL позволяет дать доступ к объекту**. Это удобно, когда нет смысла продумывать целую систему контроля доступа или тратить время на прописывание политик. Но если объектов много — лучше выбирать IAM или политику доступа.

**Подписанные ссылки**

Ещё одна возможность открыть доступ к объектному хранилищу для скачивания или загрузки объекта — механизм **подписанных ссылок** (pre-signed URL). 

С его помощью предоставляется временный (от нескольких секунд до семи дней) доступ к объекту или бакету.

Ссылка содержит:

- подпись, вычисленную на основе ключа доступа к каталогу и секретного ключа;
- описание действия, которое пользователь может выполнить в хранилище.

С помощью подписанных ссылок приложение может генерировать ссылки на объекты в хранилище (например, для пользователей, которые оплатили скачиваемый контент). Подробный алгоритм, как составить подписанные URL, вы найдете в [документации](https://cloud.yandex.ru/docs/storage/concepts/pre-signed-urls).

### Создание бакетов и загрузка объектов

> Потренируемся работать с объектным хранилищем на практике. Представьте, что вы создаёте облачную систему хранения рентгеновских снимков для крупной клиники.

> **Рентгеновские снимки** — это неструктурированные данные, которые нельзя изменять, нужно надежно хранить и легко находить. Загруженные файлы будут скачивать нечасто. Также важно предоставлять доступ к файлам другим клиникам (это пригодится, если пациента переводят или врачу надо посоветоваться с коллегами). Объектное хранилище — подходящее решение задачи.



**Имя**. Придумайте его с учетом [правил](https://cloud.yandex.ru/docs/storage/concepts/bucket#naming). Обратите внимание, что дать бакету имя `hospital` не получится. Имена бакетов во всем Yandex Object Storage уникальны — назвать два бакета одинаково нельзя даже в разных облаках. Помните об этом, если будете создавать бакеты автоматически.

**Макс. размер.** У вас есть два варианта:

- Выбрать опцию **Без ограничения**. Размер бакета будет увеличиваться, сколько бы объектов в него ни помещали.
- Указать максимальный размер. Это убережёт вас от финансовых потерь, если что-то пойдёт не так и в бакет загрузится слишком много объектов.

**Другие опции**. Далее для всех типов операций оставьте ограниченный доступ (публичный позволяет выполнять операции всем пользователям интернета), выберите стандартный класс хранилища

Файлы можно загрузить в бакет с помощью:

- консоли управления;

- [приложений](https://cloud.yandex.ru/docs/storage/tools/);

- S3-совместимого HTTP API;

  в этом случае для начала нужно будет подготовиться к работе:

  1. [Создайте сервисный аккаунт](https://cloud.yandex.ru/docs/iam/operations/sa/create).

  2. [Назначьте нужную роль сервисному аккаунту](https://cloud.yandex.ru/docs/iam/operations/sa/assign-role-for-sa). Подробнее о ролях см. в [документации Identity and Access Management](https://cloud.yandex.ru/docs/iam/concepts/access-control/roles).

  3. [Создайте статический ключ доступа](https://cloud.yandex.ru/docs/iam/operations/sa/create-access-key).

     > Идентификатор ключа:
     >
     > YCAJEt0HUykXJEtlH8dSPyhXu
     >
     > Ваш секретный ключ:
     >
     > YCPKrD8lHu6GSURMGOo1NDEC12I5-xF9hvPp5z3t

  После чего устанавливаем S3cmd командой: 

  `sudo apt-get install s3cmd`

  Для настройки S3cmd используйте команду `s3cmd --configure`:

  1. `Access Key` — введите идентификатор ключа, который вы получили при генерации [статического ключа](https://cloud.yandex.ru/docs/iam/concepts/authorization/access-key).

  2. `Secret Key` — введите секретный ключ, который вы получили при генерации [статического ключа](https://cloud.yandex.ru/docs/iam/concepts/authorization/access-key).

  3. `Default Region` — введите `ru-central1`.

  4. `S3 Endpoint` — введите `storage.yandexcloud.net`.

  5. `DNS-style bucket+hostname:port template for accessing a bucket` — введите `%(bucket)s.storage.yandexcloud.net`.

  6. Значения остальных параметров оставьте без изменений.

  7. > Программа попытается установить соединение с Object Storage и получить список бакетов. В случае успеха, программа выведет `Success. Your access key and secret key worked fine :-)`.
     >
     > Команда `s3cmd --configure` сохранит настройки в файле `~/.s3cfg` в формате:

  После чего для провеки нужно обратиться к Object Storage:

  - посмотерть список бакетов : s3cmd ls 

  > если выдало результат значит все работает

  Загрузим объект и проверим что он загрузился (запросим список хранящихся в объекте бакетов):

   ` s3cmd put <путь к второму файлу>/image02.dat s3://<имя бакета>
   s3cmd ls s3://<имя бакета>`

  Изменить метаданные:

  ` s3cmd modify --add-header=x-amz-meta-patient:petrov --add-header=x-amz-meta-status:ok s3://hospital/image01.dat s3://hospital/image02.dat`

  > С помощью утилиты S3cmd задайте для загруженных объектов метаданные с фамилией пациента (`x-amz-meta-patient:petrov`) и с результатами обследования (`x-amz-meta-status:ok`):

  Посмотерть что получилось:

  ` s3cmd info s3://hospital/image01.dat s3://hospital/image02.dat` 

- HTML-форм на сайте.



### Резервное копирование

> При загрузке в объектное хранилище файлы копируются сразу в несколько географически распределенных дата-центров, что обеспечивает их надёжное хранение.

> Тем не менее иногда быстрый доступ к данным или сами данные настолько важны, что стоит предусмотреть любые риски (например долгие перебои с доступом к интернету). В этом случае пригодится резервная копия файлов из объектного хранилища. Её можно хранить на своем сервере или в другом облаке.

В Yandex Object Storage нет собственных инструментов для резервного копирования, но есть [поддерживаемые](https://cloud.yandex.ru/docs/storage/tools/). Скачивайте объекты из хранилища самостоятельно или автоматизируйте этот процесс средствами операционной системы (планировщик заданий Windows, утилита [cron](https://ru.wikipedia.org/wiki/Cron) в Linux).

**Консольные клиенты**

Команда `sync` консольных клиентов S3cmd и AWS CLI синхронизирует содержимое бакета с папкой на компьютере или двух бакетов между собой. В указанное место копируются файлы, которых там нет, и файлы, которые изменились после прошлой синхронизации. Для поиска изменившихся файлов по умолчанию используется подсчет хеш-суммы и оценка размера. Вы можете задать и свои правила синхронизации. Подробности в [документации S3cmd](https://s3tools.org/usage).

Для S3cmd команда синхронизации в общем случае выглядит так:

`s3cmd sync s3://<имя бакета> <путь к локальной папке на компьютере>/`

**Фаловые браузеры**

Если вы не фанат консольных клиентов — используйте для резервного копирования файловые менеджеры с графическим интерфейсом, такие как [Cyberduck](https://cyberduck.io/download/) или [WinSCP](https://winscp.net/eng/download.php).

WinSCP — популярный SFTP- и FTP-клиент для Windows — работает с объектным хранилищем как с иерархической файловой системой. Ключи объектов, загружаемых в хранилище с помощью WinSCP, будут иметь вид пути к файлу (например `prefix/subprefix/picture.jpg`).

1. Для подключения к Yandex Object Storage с помощью WinSCP создайте соединение со следующими параметрами:

   - протокол передачи: Amazon S3;
   - имя хоста: storage.yandexcloud.net;
   - идентификатор ключа доступа и секретный ключ доступа: вставьте значения, которые вы получили при генерации статического ключа.

   ![image-20230324134519571](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230324134519571.png)

2. Одна из функций WinSCP облегчает автоматизацию резервного копирования файлов из папок объектного хранилища на компьютер. Выберите в бакете объект для сохранения на компьютере. В открывшемся диалоговом окне вы увидите настройки передачи по умолчанию:![image-20230324134654754](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230324134654754.png)

3. Измените настройки, если нужно, и нажмите кнопку **OK**. Программа сформирует код скрипта для резервного копирования объектов из хранилища и сохранит его в файл.![image-20230324134738266](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230324134738266.png)

4. Откройте текстовый редактор (например Блокнот) и создайте простой пакетный файл `backup.bat` со следующим содержимым: 
   `@echo off `
    `winscp.exe /ini=nul /script=<имя файла со скриптом> `

5. Запускайте файл `backup.bat` (например при помощи планировщика заданий Windows), чтобы автоматически выполнять резервное копирование с нужной вам периодичностью.

### Версионирование бакетов

> Мы можем потерять данные из-за ошибки пользователей, действий злоумышленников или сбоя в приложениях. Но некоторые данные критически важны. Их нельзя терять даже из-за форс-мажора. В примере с рентгеновскими снимками хранение всех версий электронных медицинских документов — это требование российского законодательства.

Благодаря [**версионированию**](https://cloud.yandex.ru/docs/storage/concepts/versioning) — специальному инструменту хранилища — вы не потеряете объекты даже после удаления или перезаписи.

Версионирование сохраняет историю объекта и позволяет получать доступ к его предыдущим версиям. Версионирование включается на уровне бакета и применяется ко всем объектам внутри него. Взамен вы платите за место, ведь каждая версия объекта — это его полная копия, она занимает столько же места в вашем хранилище.

В новом бакете версионирование по умолчанию приостановлено. Загружаемым объектам присваивается идентификатор версии **version_id** равный `null`. В этом случае хранится только последняя версия каждого объекта.

Версионирование для бакета включается через консоль управления или с помощью API.

Когда **версионирование включено**, загружаемые объекты получают отличное от `null` значение параметра **version_id**, который позволяет работать с конкретной версией объекта. При перезаписи версии создается новый объект с тем же ключом (идентификатором объекта в бакете) и случайно сгенерированным значением **version_id**. Для обращения к предыдущим версиям объекта используются его ключ и **version_id**.

Отключить версионирование нельзя — можно лишь приостановить. Тогда все старые версии останутся доступными, а при перезаписи будет сохраняться только последняя из новых версий.

При удалении версия помечается delete-маркером и не занимает места в хранилище. Очищайте бакет от ненужных или удалённых версий вручную или настройте жизненный цикл объектов.

> После приостановки версионирования бакета один из загруженных в него объектов перезаписан. Какое значение version_id будет у новой версии объекта? 
>
> - Такое же, как и у перезаписанной версии, плюс один
> - null
> - Такое же, как и у перезаписанной версии
>
> Ответ: null

### Хранение статических веб-сайтов в Object Storage

Представьте, что вам нужно выбрать оптимальный хостинг для сайта клиники. Главные критерии: отказоустойчивый, недорогой и простой в обслуживании. Один из вариантов решения такой задачи — использовать объектное хранилище. Вы можете, не настраивая никаких серверов, просто загрузить HTML-файлы, скрипты, стили и другие файлы в хранилище. Пользователи будут открывать в браузере ваш сайт, а по сути — скачивать файлы прямо из бакета.

Важно понимать, что этот вариант подойдет только для **полностью статических** сайтов. Иными словами, сайт должен быть сделан с помощью клиентских технологий (HTML, CSS и JavaScript) и не требовать запуска чего-либо на стороне веб-сервера.

Предположим, что сайт нашей клиники как раз такой — полностью статический. Опубликуем его с помощью объектного хранилища. Прежде всего создадим бакет:

Обратите внимание на несколько особенностей:

- Если вы планируете использовать собственный домен (например www.example.com), то присвойте бакету **точно такое же** имя.
- Откройте публичный доступ на **чтение объектов**. Это позволит пользователям интернета скачивать объекты из бакета и просматривать сайт в браузере.

Если публичный доступ открыт, то рядом с именем бакета в списке появится соответствующая надпись:

Теперь загрузите в бакет файлы сайта (например, [этот](https://disk.yandex.ru/d/KcpMuYBwKjIa6Q) и [этот](https://disk.yandex.ru/i/uTai62_esPSaEw)) любым удобным способом.

Чтобы настроить хостинг, войдите в бакет в консоли управления. На левой панели выберите вкладку **Веб-сайт** и на открывшейся странице включите **Хостинг**.![image-20230324140802994](/home/smvn/snap/typora/76/.config/Typora/typora-user-images/image-20230324140802994.png)

Укажите файл с главной страницей сайта (как правило, это `index.html`), а поле со страницей ошибки можно не заполнять.

Сохраните настройки, и сайт станет доступен по адресам: 

- `http(s)://<имя_бакета>.website.yandexcloud.net`
- `http(s)://website.yandexcloud.net/<имя_бакета>`

По умолчанию сайт будет доступен только по протоколу HTTP. Для поддержки HTTPS нужно загрузить в объектное хранилище собственный сертификат безопасности. Как это сделать, рассказано в [документации](https://cloud.yandex.ru/docs/storage/operations/hosting/certificate).

Также о доступе к статическому сайту по протоколу HTTPS вы узнаете из курса **Безопасность**.

Если у вас есть собственный домен и вы хотите опубликовать сайт на нём, то настройте CNAME-запись у DNS-провайдера или на своем DNS-сервере. Например, для домена `www.example.com` CNAME-запись выглядела бы так: `www.example.com CNAME www.example.com.website.yandexcloud.net`

В этом случае можно использовать домены **не ниже третьего уровня** (то есть использовать домен `example.com` не получится, только `www.example.com`). Это связано с особенностями обработки CNAME-записей на DNS-хостингах.